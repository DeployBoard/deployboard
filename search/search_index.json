{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Measure the success of DevOps in your organization. Features \u00b6 Simple deployment tracking tool. Easily plugs in to any deployment tool or pipeline. Tracks DORA metrics, compliance, and more. Service catalog. See the full set of Features . Documentation \u00b6 Docs are available at docs.deployboard.io . Contributing \u00b6 There are many ways to contribute. Please see the guide to Contributing on our docs. You can also Help DeployBoard in other ways, without requiring any coding.","title":"DeployBoard"},{"location":"#features","text":"Simple deployment tracking tool. Easily plugs in to any deployment tool or pipeline. Tracks DORA metrics, compliance, and more. Service catalog. See the full set of Features .","title":"Features"},{"location":"#documentation","text":"Docs are available at docs.deployboard.io .","title":"Documentation"},{"location":"#contributing","text":"There are many ways to contribute. Please see the guide to Contributing on our docs. You can also Help DeployBoard in other ways, without requiring any coding.","title":"Contributing"},{"location":"contributing/","text":"Contributing \u00b6 Process \u00b6 DeployBoard works on a Fork & Pull based system. If you want to implement a new feature, or fix an existing bug, first search our open issues to see if an issue already exists. If you find an existing issue, please first comment on the issue that you are going to work on. This helps reduce duplicated work. If you do not find an existing issue, please open a new issue filling out the provided issue templates before starting work. Development \u00b6 Of course, you are free to use whatever editor and environment you like. DeployBoard uses React for the frontend, NodeJS/Express for the backend api, and MongoDB as the database. Note The following commands are run from the project root. Volta \u00b6 To ensure we all have the same development environment, we use Volta . We provide a volta config in the root package.json file that specifies the version of node and npm that we use for the entire project. See Volta's Installation guide to set that up. Note You are free to use any other manager, just ensure the versions match what is in the volta config. Use Volta to install node and npm # Install the specified versions of node and npm, and also install turbo. volta install node npm turbo Turborepo \u00b6 Notice we install turbo in the volta install command, this is because DeployBoard is a monorepo that uses Turborepo to manage the apps within the repo. NPM Install \u00b6 From here we can simply run npm install to install all of the dependencies for all of the applications. Run Dev \u00b6 If you notice the commands in the package.json actually run turbo mapped to commands in the turbo.json file. You can look in the turbo.json file if you are interested in what is happening. npm run dev The application should be running now at localhost:3000 , but you still need to start and seed the database before you can log in. Start the DB \u00b6 We use Docker to run a local copy of MongoDB, but we provide an npm script via npm to start it. npm run mongo Note Since the database is started as a Docker container, if you want to stop Mongo, you will need to run a separate docker stop mongo command. Seed the DB \u00b6 We also provide an npm script to seed the database with the seed user and some randomized sample data. npm run seed Usage \u00b6 Once you have the database seeded, you will be able to log in. The usernames created as part of the seed script are: admin@seed.seed (role: Admin) editor@seed.seed (role: Editor) viewer@seed.seed (role: Viewer) The password provided for all development users is the string Password123 . Note Disabled users are also created for each role. The disabled users were created for testing access controls. API Keys are also created, you can find them at localhost:3000/account/apikeys . Build the app \u00b6 After testing in the Dev environment, we want to create a production ready build to verify everything still works. # Build the app npm run build # Start the app from the built bundle npm run start Since the built app uses the same database, you don't need to restart the DB or re-run the seed script, the previous credentials should still work. Testing \u00b6 TBD Docs \u00b6 Docs are hosted via Docker, and can be started with an npm script like the Mongo database. npm run docs Note Just like the MongoDB container, we will need to stop the Docs container separately with docker stop docs Committing \u00b6 TODO: Set up a pre-commit library.","title":"Contributing"},{"location":"contributing/#contributing","text":"","title":"Contributing"},{"location":"contributing/#process","text":"DeployBoard works on a Fork & Pull based system. If you want to implement a new feature, or fix an existing bug, first search our open issues to see if an issue already exists. If you find an existing issue, please first comment on the issue that you are going to work on. This helps reduce duplicated work. If you do not find an existing issue, please open a new issue filling out the provided issue templates before starting work.","title":"Process"},{"location":"contributing/#development","text":"Of course, you are free to use whatever editor and environment you like. DeployBoard uses React for the frontend, NodeJS/Express for the backend api, and MongoDB as the database. Note The following commands are run from the project root.","title":"Development"},{"location":"contributing/#volta","text":"To ensure we all have the same development environment, we use Volta . We provide a volta config in the root package.json file that specifies the version of node and npm that we use for the entire project. See Volta's Installation guide to set that up. Note You are free to use any other manager, just ensure the versions match what is in the volta config. Use Volta to install node and npm # Install the specified versions of node and npm, and also install turbo. volta install node npm turbo","title":"Volta"},{"location":"contributing/#turborepo","text":"Notice we install turbo in the volta install command, this is because DeployBoard is a monorepo that uses Turborepo to manage the apps within the repo.","title":"Turborepo"},{"location":"contributing/#npm-install","text":"From here we can simply run npm install to install all of the dependencies for all of the applications.","title":"NPM Install"},{"location":"contributing/#run-dev","text":"If you notice the commands in the package.json actually run turbo mapped to commands in the turbo.json file. You can look in the turbo.json file if you are interested in what is happening. npm run dev The application should be running now at localhost:3000 , but you still need to start and seed the database before you can log in.","title":"Run Dev"},{"location":"contributing/#start-the-db","text":"We use Docker to run a local copy of MongoDB, but we provide an npm script via npm to start it. npm run mongo Note Since the database is started as a Docker container, if you want to stop Mongo, you will need to run a separate docker stop mongo command.","title":"Start the DB"},{"location":"contributing/#seed-the-db","text":"We also provide an npm script to seed the database with the seed user and some randomized sample data. npm run seed","title":"Seed the DB"},{"location":"contributing/#usage","text":"Once you have the database seeded, you will be able to log in. The usernames created as part of the seed script are: admin@seed.seed (role: Admin) editor@seed.seed (role: Editor) viewer@seed.seed (role: Viewer) The password provided for all development users is the string Password123 . Note Disabled users are also created for each role. The disabled users were created for testing access controls. API Keys are also created, you can find them at localhost:3000/account/apikeys .","title":"Usage"},{"location":"contributing/#build-the-app","text":"After testing in the Dev environment, we want to create a production ready build to verify everything still works. # Build the app npm run build # Start the app from the built bundle npm run start Since the built app uses the same database, you don't need to restart the DB or re-run the seed script, the previous credentials should still work.","title":"Build the app"},{"location":"contributing/#testing","text":"TBD","title":"Testing"},{"location":"contributing/#docs","text":"Docs are hosted via Docker, and can be started with an npm script like the Mongo database. npm run docs Note Just like the MongoDB container, we will need to stop the Docs container separately with docker stop docs","title":"Docs"},{"location":"contributing/#committing","text":"TODO: Set up a pre-commit library.","title":"Committing"},{"location":"deployboard-yaml/","text":"deployboard.yaml \u00b6 COMING SOON File \u00b6 DeployBoard can manage dependencies and automatically build a service network map all from a yaml file in each git repository. An example file might look like this. TODO: What about multiple applications/services in the same repo? name: my-example-service domain: - name: example.com - paths: - /test - /v2/test - methods: - GET - PUT - POST - OPTIONS depends: - service1 - service2 - service4 - service12 - api.dropboxapi.com Admin -> Checkout -> Card -> Thing2","title":"deployboard.yaml"},{"location":"deployboard-yaml/#deployboardyaml","text":"COMING SOON","title":"deployboard.yaml"},{"location":"deployboard-yaml/#file","text":"DeployBoard can manage dependencies and automatically build a service network map all from a yaml file in each git repository. An example file might look like this. TODO: What about multiple applications/services in the same repo? name: my-example-service domain: - name: example.com - paths: - /test - /v2/test - methods: - GET - PUT - POST - OPTIONS depends: - service1 - service2 - service4 - service12 - api.dropboxapi.com Admin -> Checkout -> Card -> Thing2","title":"File"},{"location":"external-links/","text":"External Links \u00b6 Placeholder file. Coming Soon.","title":"External Links"},{"location":"external-links/#external-links","text":"Placeholder file. Coming Soon.","title":"External Links"},{"location":"features/","text":"Features \u00b6 Deployment Tracking \u00b6 At the core, DeployBoard is a simple deployment tracking tool. Simply send DeployBoard an event, and it will log that event. Analytics \u00b6 Because DeployBoard tracks all of your events, it is able to provide valuable analytics around the velocity of your team. See DORA metrics for more information. Compliance/Audit Log \u00b6 DeployBoard allows you to confidently hand over production deployment change events to auditors. Notifications \u00b6 Replace the manual notifications with automated messaging. No longer will you have to post updates when deployments are starting or when they are finished. No one will question if a deployment is still in progress. Self-Service Ops \u00b6 You no longer have to reach our to your Dev or Ops team to find out what version of an application is deployed, simply check the dashboard. Answers common questions: \"What version of <application> is deployed to <environment> ?\" \"When was <application> <version> deployed to <environment> ?\" \"What applications were deployed around <time> ?\"","title":"Features"},{"location":"features/#features","text":"","title":"Features"},{"location":"features/#deployment-tracking","text":"At the core, DeployBoard is a simple deployment tracking tool. Simply send DeployBoard an event, and it will log that event.","title":"Deployment Tracking"},{"location":"features/#analytics","text":"Because DeployBoard tracks all of your events, it is able to provide valuable analytics around the velocity of your team. See DORA metrics for more information.","title":"Analytics"},{"location":"features/#complianceaudit-log","text":"DeployBoard allows you to confidently hand over production deployment change events to auditors.","title":"Compliance/Audit Log"},{"location":"features/#notifications","text":"Replace the manual notifications with automated messaging. No longer will you have to post updates when deployments are starting or when they are finished. No one will question if a deployment is still in progress.","title":"Notifications"},{"location":"features/#self-service-ops","text":"You no longer have to reach our to your Dev or Ops team to find out what version of an application is deployed, simply check the dashboard. Answers common questions: \"What version of <application> is deployed to <environment> ?\" \"When was <application> <version> deployed to <environment> ?\" \"What applications were deployed around <time> ?\"","title":"Self-Service Ops"},{"location":"help-deployboard/","text":"Help DeployBoard \u00b6 Do you like DeployBoard ? Would you like to help DeployBoard, other users, and the author? There are very simple ways to help (several involve just one or two clicks). Star DeployBoard on GitHub \u00b6 You can \"star\" DeployBoard on GitHub (clicking the \"star\" button at the top right): https://github.com/DeployBoard/deployboard . \u2b50\ufe0f By adding a star, other users will be able to find it more easily and see that it has been already useful for others. Watch the GitHub repository for releases \u00b6 You can \"watch\" DeployBoard on GitHub (clicking the \"watch\" button at the top right): https://github.com/DeployBoard/deployboard . \ud83d\udc40 There you can select \"Releases only\". Doing this, you will receive notifications (in your email) whenever there is a new version of DeployBoard released containing bug fixes and new features. Connect with the author \u00b6 You can connect with me (Matt Karmazyn / ItsKarma ), the author. Follow me on GitHub . Follow me on Twitter . Connect with me on Linkedin . Tweet about DeployBoard \u00b6 Tweet about DeployBoard and let me and others know why you like it. \ud83c\udf89 I love to hear about how DeployBoard is being used, what have you liked in it, in which project/company are you using it, etc. Help others with issues on GitHub \u00b6 You can see existing issues and try to help others. \ud83e\udd13 Create issues \u00b6 You can create a new issue in the GitHub repository, for example to: Ask a question or ask about a problem . Suggest a new feature . Create a Pull Request \u00b6 You can contribute to the source code with Pull Requests, for example: To fix a typo you found on the documentation. To share an article, video, or podcast you created or found about DeployBoard by editing this file . Make sure you add your link to the end of the corresponding section. To propose new documentation sections. To fix an existing issue/bug. To add a new feature. Thanks! \ud83d\ude80","title":"Help DeployBoard"},{"location":"help-deployboard/#help-deployboard","text":"Do you like DeployBoard ? Would you like to help DeployBoard, other users, and the author? There are very simple ways to help (several involve just one or two clicks).","title":"Help DeployBoard"},{"location":"help-deployboard/#star-deployboard-on-github","text":"You can \"star\" DeployBoard on GitHub (clicking the \"star\" button at the top right): https://github.com/DeployBoard/deployboard . \u2b50\ufe0f By adding a star, other users will be able to find it more easily and see that it has been already useful for others.","title":"Star DeployBoard on GitHub"},{"location":"help-deployboard/#watch-the-github-repository-for-releases","text":"You can \"watch\" DeployBoard on GitHub (clicking the \"watch\" button at the top right): https://github.com/DeployBoard/deployboard . \ud83d\udc40 There you can select \"Releases only\". Doing this, you will receive notifications (in your email) whenever there is a new version of DeployBoard released containing bug fixes and new features.","title":"Watch the GitHub repository for releases"},{"location":"help-deployboard/#connect-with-the-author","text":"You can connect with me (Matt Karmazyn / ItsKarma ), the author. Follow me on GitHub . Follow me on Twitter . Connect with me on Linkedin .","title":"Connect with the author"},{"location":"help-deployboard/#tweet-about-deployboard","text":"Tweet about DeployBoard and let me and others know why you like it. \ud83c\udf89 I love to hear about how DeployBoard is being used, what have you liked in it, in which project/company are you using it, etc.","title":"Tweet about DeployBoard"},{"location":"help-deployboard/#help-others-with-issues-on-github","text":"You can see existing issues and try to help others. \ud83e\udd13","title":"Help others with issues on GitHub"},{"location":"help-deployboard/#create-issues","text":"You can create a new issue in the GitHub repository, for example to: Ask a question or ask about a problem . Suggest a new feature .","title":"Create issues"},{"location":"help-deployboard/#create-a-pull-request","text":"You can contribute to the source code with Pull Requests, for example: To fix a typo you found on the documentation. To share an article, video, or podcast you created or found about DeployBoard by editing this file . Make sure you add your link to the end of the corresponding section. To propose new documentation sections. To fix an existing issue/bug. To add a new feature. Thanks! \ud83d\ude80","title":"Create a Pull Request"},{"location":"people/","text":"People \u00b6 Placeholder file. Coming Soon.","title":"People"},{"location":"people/#people","text":"Placeholder file. Coming Soon.","title":"People"},{"location":"quick-start/","text":"Quick Start \u00b6 Usage \u00b6 Getting started is as simple as sending a POST request using an API Key to the deploy endpoint. A sample curl request would look like this Note You can get your API Key from the API Keys section of the UI. curl --request POST \\ --url https://deploy.deployboard.io/deploy \\ --header 'Content-Type: application/json' \\ --header 'x-api-key: xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx' \\ --data '{ \"service\": \"Payment\", \"environment\": \"Development\", \"status\": \"Deployed\", \"version\": \"v0.0.0\" }' In real usage, you would parameterize these variables, so your script is reusable. DEPLOYBOARD_API_KEY=\"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\" SERVICE=\"Payment\" ENVIRONMENT=\"Development\" VERSION=\"v0.0.0\" STATUS=\"Deploying\" DATA=\"{\\\"service\\\":\\\"${SERVICE}\\\",\\\"environment\\\":\\\"${ENVIRONMENT}\\\",\\\"version\\\":\\\"${VERSION}\\\",\\\"status\\\":\\\"${STATUS}\\\"}\" curl --request POST \\ --url https://deploy.deployboard.io/deploy \\ --header \"Content-Type: application/json\" \\ --header \"x-api-key: ${DEPLOYBOARD_API_KEY}\" \\ --data \"${DATA}\"","title":"Quick Start"},{"location":"quick-start/#quick-start","text":"","title":"Quick Start"},{"location":"quick-start/#usage","text":"Getting started is as simple as sending a POST request using an API Key to the deploy endpoint. A sample curl request would look like this Note You can get your API Key from the API Keys section of the UI. curl --request POST \\ --url https://deploy.deployboard.io/deploy \\ --header 'Content-Type: application/json' \\ --header 'x-api-key: xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx' \\ --data '{ \"service\": \"Payment\", \"environment\": \"Development\", \"status\": \"Deployed\", \"version\": \"v0.0.0\" }' In real usage, you would parameterize these variables, so your script is reusable. DEPLOYBOARD_API_KEY=\"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\" SERVICE=\"Payment\" ENVIRONMENT=\"Development\" VERSION=\"v0.0.0\" STATUS=\"Deploying\" DATA=\"{\\\"service\\\":\\\"${SERVICE}\\\",\\\"environment\\\":\\\"${ENVIRONMENT}\\\",\\\"version\\\":\\\"${VERSION}\\\",\\\"status\\\":\\\"${STATUS}\\\"}\" curl --request POST \\ --url https://deploy.deployboard.io/deploy \\ --header \"Content-Type: application/json\" \\ --header \"x-api-key: ${DEPLOYBOARD_API_KEY}\" \\ --data \"${DATA}\"","title":"Usage"},{"location":"release-notes/","text":"Release Notes \u00b6 Placeholder file. Coming Soon.","title":"Release Notes"},{"location":"release-notes/#release-notes","text":"Placeholder file. Coming Soon.","title":"Release Notes"},{"location":"security/","text":"Security \u00b6 Protecting user data is the number one priority for us. We take a number of measures to ensure data can not be accessed by anyone outside your organization. Auth \u00b6 The authentication workflow looks like this: Local Auth \u00b6 Post the email and password to the login route on the auth server. Auth server uses express-mongo-sanitize package to protect against query selector injection attacks . express-mongo-sanitize is used all over the api. Auth server verifies a valid email address in the database. Check to see if the user is enabled. Check to see if it is locked, or had too many attempts within the allowed time limit as defined in our mongoose user model. Then we check to verify the password provided matches the hashed password in the database. Generate a JWT and return back to user. SSO Auth \u00b6 Post the email to the login/sso route on the auth server. Auth server uses express-mongo-sanitize package to protect against query selector injection attacks . express-mongo-sanitize is used all over the api. Auth server plucks out the domain from the email address provided. Query the database for the account that matches that email domain. Get the SSO type from the account config. Get the SSO config Generate a proper request to the target provider and send the request to the provider. The SSO provider will validate the user, and respond to the auth server callback url. The callback url will: a. Decode and validate the response. b. Get the group membership of the user (if provided). c. Associate the user to a Role within DeployBoard based on their group membership. Generate a JWT and return back to the user. API \u00b6 When making a request to an api endpoint, you must pass your JWT in the Authorization header in the format of Bearer <token> The api server will: Verify the token is valid and generated from DeployBoard. Decode the token. a. Get the user's role from the token. b. Get the account name from the token. We never use the \"account\" field from a user controlled input of any type. Verify the user's role is able to perform this action. The API endpoints use express-mongo-sanitize on all input fields to protect against query selector injection attacks . a. We also rely on mongoose types and inbuilt validators to ensure you can not pass unexpected data. Query is made to the database. The response is put through another middleware that loops over every item returned from the query to verify all of the data returned contains only the requested user's account. Rate Limit \u00b6 The API has some rate limiting built-in to protect against abuse. UI Roles \u00b6 We use the Role in the user's token to verify they are able to access certain parts of the UI. Even if a user was able to fake their role in some way, the call to the backend would fail because their token does not contain the required role. The web/ui server will: Decode the token returned from the auth server to get the user's role. Various parts of the web frontend will only be available if you have a specific role. For example: a. Users and Editors will not see the Account Admin pages in the UI. b. Users will not see any Add/Remove/Edit buttons in the UI. Concerns / Suggestions \u00b6 If you have any security concerns or suggestions on how we can improve our security posture, please email us at support@deployboard.io and we will address them as quickly as possible.","title":"Security"},{"location":"security/#security","text":"Protecting user data is the number one priority for us. We take a number of measures to ensure data can not be accessed by anyone outside your organization.","title":"Security"},{"location":"security/#auth","text":"The authentication workflow looks like this:","title":"Auth"},{"location":"security/#local-auth","text":"Post the email and password to the login route on the auth server. Auth server uses express-mongo-sanitize package to protect against query selector injection attacks . express-mongo-sanitize is used all over the api. Auth server verifies a valid email address in the database. Check to see if the user is enabled. Check to see if it is locked, or had too many attempts within the allowed time limit as defined in our mongoose user model. Then we check to verify the password provided matches the hashed password in the database. Generate a JWT and return back to user.","title":"Local Auth"},{"location":"security/#sso-auth","text":"Post the email to the login/sso route on the auth server. Auth server uses express-mongo-sanitize package to protect against query selector injection attacks . express-mongo-sanitize is used all over the api. Auth server plucks out the domain from the email address provided. Query the database for the account that matches that email domain. Get the SSO type from the account config. Get the SSO config Generate a proper request to the target provider and send the request to the provider. The SSO provider will validate the user, and respond to the auth server callback url. The callback url will: a. Decode and validate the response. b. Get the group membership of the user (if provided). c. Associate the user to a Role within DeployBoard based on their group membership. Generate a JWT and return back to the user.","title":"SSO Auth"},{"location":"security/#api","text":"When making a request to an api endpoint, you must pass your JWT in the Authorization header in the format of Bearer <token> The api server will: Verify the token is valid and generated from DeployBoard. Decode the token. a. Get the user's role from the token. b. Get the account name from the token. We never use the \"account\" field from a user controlled input of any type. Verify the user's role is able to perform this action. The API endpoints use express-mongo-sanitize on all input fields to protect against query selector injection attacks . a. We also rely on mongoose types and inbuilt validators to ensure you can not pass unexpected data. Query is made to the database. The response is put through another middleware that loops over every item returned from the query to verify all of the data returned contains only the requested user's account.","title":"API"},{"location":"security/#rate-limit","text":"The API has some rate limiting built-in to protect against abuse.","title":"Rate Limit"},{"location":"security/#ui-roles","text":"We use the Role in the user's token to verify they are able to access certain parts of the UI. Even if a user was able to fake their role in some way, the call to the backend would fail because their token does not contain the required role. The web/ui server will: Decode the token returned from the auth server to get the user's role. Various parts of the web frontend will only be available if you have a specific role. For example: a. Users and Editors will not see the Account Admin pages in the UI. b. Users will not see any Add/Remove/Edit buttons in the UI.","title":"UI Roles"},{"location":"security/#concerns-suggestions","text":"If you have any security concerns or suggestions on how we can improve our security posture, please email us at support@deployboard.io and we will address them as quickly as possible.","title":"Concerns / Suggestions"},{"location":"terminology/","text":"Terminology \u00b6 Service \u00b6 A service represents any deployable entity. This can be a microservice, application, lambda function, etc.","title":"Terminology"},{"location":"terminology/#terminology","text":"","title":"Terminology"},{"location":"terminology/#service","text":"A service represents any deployable entity. This can be a microservice, application, lambda function, etc.","title":"Service"},{"location":"auth/saml/","text":"SAML authentication \u00b6 The SAML authentication method allows your users to log in to DeployBoard using a SAML compatible single sign-on provider. Note Every SAML application should follow the same instructuions, although the steps to create an application within your SAML identity provider will differ slightly. Google \u00b6 Create an Application \u00b6 https://support.google.com/a/answer/6087519 Log in to the Google Admin Portal . Go to the Apps and select Web and mobile apps . Click the Add app dropdown and select Add custom SAML app . Enter a name for the App. We suggest: DeployBoard and click Continue . Click Download IdP metadata and save the .xml file for later. You can download this later in case you lose it or forget . Service provider details: a. ACS URL: https://auth.deployboard.io/login/sso/callback?account=${YourAccountName} a. Entity ID: https://auth.deployboard.io/saml/metadata.xml a. Start URL: leave blank a. Signed response: leave unchecked Name ID: a. Name ID format: EMAIL a. Name ID: Basic Information > Primary email Click Continue to proceed to Attribute Mapping You can leave the Attriutes section empty. If you are using role mapping from Groups (you should be), add the groups you would like to be able to log into DeployBoard with. You will perform the role mappings in the DeployBoard interface. a. Google groups: Add the groups you would like to be able to log into DeployBoard. b. App attribute: This should be Groups . This is important since DeployBoard looks for this when the user logs in to perform automatic role mapping based on Group membership. Okta \u00b6 Create an Okta application \u00b6 TODO: Add instructions Role Mapping \u00b6 In the SSO settings page, you can specify what groups in your SAML identity provider map to Admin, Editor, and User roles within DeployBoard. This means when onboarding a new user, you don't need to manually specify their role within DeployBoard, as it can be mapped back to a group in the identity provider.","title":"SAML authentication"},{"location":"auth/saml/#saml-authentication","text":"The SAML authentication method allows your users to log in to DeployBoard using a SAML compatible single sign-on provider. Note Every SAML application should follow the same instructuions, although the steps to create an application within your SAML identity provider will differ slightly.","title":"SAML authentication"},{"location":"auth/saml/#google","text":"","title":"Google"},{"location":"auth/saml/#create-an-application","text":"https://support.google.com/a/answer/6087519 Log in to the Google Admin Portal . Go to the Apps and select Web and mobile apps . Click the Add app dropdown and select Add custom SAML app . Enter a name for the App. We suggest: DeployBoard and click Continue . Click Download IdP metadata and save the .xml file for later. You can download this later in case you lose it or forget . Service provider details: a. ACS URL: https://auth.deployboard.io/login/sso/callback?account=${YourAccountName} a. Entity ID: https://auth.deployboard.io/saml/metadata.xml a. Start URL: leave blank a. Signed response: leave unchecked Name ID: a. Name ID format: EMAIL a. Name ID: Basic Information > Primary email Click Continue to proceed to Attribute Mapping You can leave the Attriutes section empty. If you are using role mapping from Groups (you should be), add the groups you would like to be able to log into DeployBoard with. You will perform the role mappings in the DeployBoard interface. a. Google groups: Add the groups you would like to be able to log into DeployBoard. b. App attribute: This should be Groups . This is important since DeployBoard looks for this when the user logs in to perform automatic role mapping based on Group membership.","title":"Create an Application"},{"location":"auth/saml/#okta","text":"","title":"Okta"},{"location":"auth/saml/#create-an-okta-application","text":"TODO: Add instructions","title":"Create an Okta application"},{"location":"auth/saml/#role-mapping","text":"In the SSO settings page, you can specify what groups in your SAML identity provider map to Admin, Editor, and User roles within DeployBoard. This means when onboarding a new user, you don't need to manually specify their role within DeployBoard, as it can be mapped back to a group in the identity provider.","title":"Role Mapping"},{"location":"backups/","text":"Backups - Intro \u00b6 MongoDB \u00b6 DeployBoard uses MongoDB to store all data. You have a few options that depend on how you choose to run MongoDB. For more information on backing up MongoDB, see the backup docs . Container \u00b6 By default, MongoDB runs in a container. You can perform a mongodump on a cron schedule, and run mongorestore when needed to recover the data. You can perform a block level backup of the filesystem that the Docker container is running on. (requires some additional configuration) Atlas \u00b6 MongoDB offers a cloud based solution Atlas which does offer a free tier that should satisfy most deployments. Atlas provides on-demand snapshots and continuous cloud backups . If using Atlas , you can still perform mongodump and mongorestore , but it will be much easier to just have Atlas do the backups automatically for you. Secrets \u00b6 When running a production level instance of DeployBoard, you should be changing some default variables. You will want to make sure to back these up, and there are plenty of options out there for secrets management. Since managing secrets depends a lot on the type of environment that you are running your DeployBoard instance in, it is not realistic for us to be able to provide every method. To get you started we will provide some links to popular solutions. ECS Kubernetes Just know that you should be storing these secrets encrypted somewhere. In case of server disaster, that should not cause you to lose your secrets.","title":"Backups - Intro"},{"location":"backups/#backups-intro","text":"","title":"Backups - Intro"},{"location":"backups/#mongodb","text":"DeployBoard uses MongoDB to store all data. You have a few options that depend on how you choose to run MongoDB. For more information on backing up MongoDB, see the backup docs .","title":"MongoDB"},{"location":"backups/#container","text":"By default, MongoDB runs in a container. You can perform a mongodump on a cron schedule, and run mongorestore when needed to recover the data. You can perform a block level backup of the filesystem that the Docker container is running on. (requires some additional configuration)","title":"Container"},{"location":"backups/#atlas","text":"MongoDB offers a cloud based solution Atlas which does offer a free tier that should satisfy most deployments. Atlas provides on-demand snapshots and continuous cloud backups . If using Atlas , you can still perform mongodump and mongorestore , but it will be much easier to just have Atlas do the backups automatically for you.","title":"Atlas"},{"location":"backups/#secrets","text":"When running a production level instance of DeployBoard, you should be changing some default variables. You will want to make sure to back these up, and there are plenty of options out there for secrets management. Since managing secrets depends a lot on the type of environment that you are running your DeployBoard instance in, it is not realistic for us to be able to provide every method. To get you started we will provide some links to popular solutions. ECS Kubernetes Just know that you should be storing these secrets encrypted somewhere. In case of server disaster, that should not cause you to lose your secrets.","title":"Secrets"},{"location":"deployment/","text":"Deployment - Intro \u00b6 Deploying your own instance of DeployBoard is relatively easy. There are several ways to do it depending on your specific use case and the tools that you use. Use the pre-built docker image from docker hub . Build your own docker image from source code. Build and run the application from source without docker. The easiest and recommended approach is to just use the pre-built docker image from docker hub . Tip Before deploying, please read the configuration page on how to configure DeployBoard.","title":"Deployment - Intro"},{"location":"deployment/#deployment-intro","text":"Deploying your own instance of DeployBoard is relatively easy. There are several ways to do it depending on your specific use case and the tools that you use. Use the pre-built docker image from docker hub . Build your own docker image from source code. Build and run the application from source without docker. The easiest and recommended approach is to just use the pre-built docker image from docker hub . Tip Before deploying, please read the configuration page on how to configure DeployBoard.","title":"Deployment - Intro"},{"location":"deployment/configuration/","text":"Configuration \u00b6 You can customize the configuration using environment variables, this way you don't have to manage a configuration file, and you are not committing any potential secrets into source code. Some configuration such as the SAML config for SSO is stored in the database, so you will first need to set up DeployBoard, log in, then configure SSO in the admin section. Note In development, DeployBoard uses dotenv to load configuration from a .env file. You can create a .env file at the root of each app in the /apps directory, but it is recommended to just use the environment variables. Core \u00b6 Key Description Default Type Required ACCESS_TOKEN_SECRET Used when signing the access token. None string No REFRESH_TOKEN_SECRET Used when signing the refresh token. None string No REACT_APP_API_URI URI of the api, specifically used for the react frontend. http://localhost:3001 string No REACT_APP_AUTH_URI URI of the auth server, specifically used for the react frontend app. http://localhost:3002 string No WEB_URI URI of the www marketing site. None string No APP_URI URI of the react web app. http://localhost:3000 string No API_URI URI of the api server. http://localhost:3001 string No AUTH_URI URI of the auth server. http://localhost:3002 string No DEPLOY_URI URI of the deploy server. http://localhost:3003 string No SMTP_HOST Host address of your SMTP server. None string No SMTP_PORT Port of your SMTP server. None string No SMTP_USER SMTP server username. None string No SMTP_PASS Password for your SMTP user. None string No LOG_LEVEL Log level. debug string No MONGO_URI The full path to the mongo db. mongodb://localhost/deployboard string No","title":"Configuration"},{"location":"deployment/configuration/#configuration","text":"You can customize the configuration using environment variables, this way you don't have to manage a configuration file, and you are not committing any potential secrets into source code. Some configuration such as the SAML config for SSO is stored in the database, so you will first need to set up DeployBoard, log in, then configure SSO in the admin section. Note In development, DeployBoard uses dotenv to load configuration from a .env file. You can create a .env file at the root of each app in the /apps directory, but it is recommended to just use the environment variables.","title":"Configuration"},{"location":"deployment/configuration/#core","text":"Key Description Default Type Required ACCESS_TOKEN_SECRET Used when signing the access token. None string No REFRESH_TOKEN_SECRET Used when signing the refresh token. None string No REACT_APP_API_URI URI of the api, specifically used for the react frontend. http://localhost:3001 string No REACT_APP_AUTH_URI URI of the auth server, specifically used for the react frontend app. http://localhost:3002 string No WEB_URI URI of the www marketing site. None string No APP_URI URI of the react web app. http://localhost:3000 string No API_URI URI of the api server. http://localhost:3001 string No AUTH_URI URI of the auth server. http://localhost:3002 string No DEPLOY_URI URI of the deploy server. http://localhost:3003 string No SMTP_HOST Host address of your SMTP server. None string No SMTP_PORT Port of your SMTP server. None string No SMTP_USER SMTP server username. None string No SMTP_PASS Password for your SMTP user. None string No LOG_LEVEL Log level. debug string No MONGO_URI The full path to the mongo db. mongodb://localhost/deployboard string No","title":"Core"},{"location":"deployment/docker-hub/","text":"Docker - Hub \u00b6 The following describes how to deploy DeployBoard using the image provided from Docker Hub .","title":"Docker - Hub"},{"location":"deployment/docker-hub/#docker-hub","text":"The following describes how to deploy DeployBoard using the image provided from Docker Hub .","title":"Docker - Hub"},{"location":"deployment/docker-source/","text":"Docker - Source \u00b6 The following describes how to build and deploy a DeployBoard Docker image from source.","title":"Docker - Source"},{"location":"deployment/docker-source/#docker-source","text":"The following describes how to build and deploy a DeployBoard Docker image from source.","title":"Docker - Source"},{"location":"deployment/ecs/","text":"ECS \u00b6 The following describes how to deploy DeployBoard to ECS.","title":"ECS"},{"location":"deployment/ecs/#ecs","text":"The following describes how to deploy DeployBoard to ECS.","title":"ECS"},{"location":"deployment/kubernetes/","text":"Kubernetes \u00b6 The following describes how to deploy DeployBoard to Kubernetes.","title":"Kubernetes"},{"location":"deployment/kubernetes/#kubernetes","text":"The following describes how to deploy DeployBoard to Kubernetes.","title":"Kubernetes"},{"location":"deployment/quickstart/","text":"Quick Start \u00b6 Note This guide gets DeployBoard up and running, but not necessarily production ready. Read the full Deployment guide to make your install production ready. Install \u00b6 The quickest way to get an instance of DeployBoard up and running is using docker-compose. git clone https://github.com/DeployBoard/deployboard cd deployboard python3 -m venv venv source venv/bin/activate pip3 install -r requirements-dev.txt docker-compose up -d --build python3 ./scripts/first_user.py Details \u00b6 In case you don't know what any of the commands above do. We clone the git repo. git clone https://github.com/DeployBoard/deployboard Change directory into the repo. cd deployboard Create a virtual environment so our install dependencies are isolated in a temporary workspace. python3 -m venv venv Activate our virtual environment. source venv/bin/activate Install our requirements. These will get installed within your virtual environment, so you don't have to worry about conflicts. pip3 install -r requirements-dev.txt Start the docker containers using docker-compose. The --build flag will force building the containers from scratch. docker-compose up -d --build Once the MongoDB container is running, you can run the first_user script to create the account and first admin user. python3 ./scripts/first_user.py","title":"Quick Start"},{"location":"deployment/quickstart/#quick-start","text":"Note This guide gets DeployBoard up and running, but not necessarily production ready. Read the full Deployment guide to make your install production ready.","title":"Quick Start"},{"location":"deployment/quickstart/#install","text":"The quickest way to get an instance of DeployBoard up and running is using docker-compose. git clone https://github.com/DeployBoard/deployboard cd deployboard python3 -m venv venv source venv/bin/activate pip3 install -r requirements-dev.txt docker-compose up -d --build python3 ./scripts/first_user.py","title":"Install"},{"location":"deployment/quickstart/#details","text":"In case you don't know what any of the commands above do. We clone the git repo. git clone https://github.com/DeployBoard/deployboard Change directory into the repo. cd deployboard Create a virtual environment so our install dependencies are isolated in a temporary workspace. python3 -m venv venv Activate our virtual environment. source venv/bin/activate Install our requirements. These will get installed within your virtual environment, so you don't have to worry about conflicts. pip3 install -r requirements-dev.txt Start the docker containers using docker-compose. The --build flag will force building the containers from scratch. docker-compose up -d --build Once the MongoDB container is running, you can run the first_user script to create the account and first admin user. python3 ./scripts/first_user.py","title":"Details"},{"location":"deployment/standalone/","text":"Standalone \u00b6 The following describes how to deploy DeployBoard to a standalone instance without using Docker.","title":"Standalone"},{"location":"deployment/standalone/#standalone","text":"The following describes how to deploy DeployBoard to a standalone instance without using Docker.","title":"Standalone"},{"location":"upgrading/","text":"Upgrading - Intro \u00b6 Placeholder file. Instructions to upgrade an existing deployment Coming Soon.","title":"Upgrading - Intro"},{"location":"upgrading/#upgrading-intro","text":"Placeholder file. Instructions to upgrade an existing deployment Coming Soon.","title":"Upgrading - Intro"}]}