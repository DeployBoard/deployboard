type Query {
  serviceById(_id: MongoID!): Service
  serviceByIds(_ids: [MongoID!]!, limit: Int = 100, sort: SortFindByIdsServiceInput): [Service!]!
  serviceOne(
    """Filter by fields"""
    filter: FilterFindOneServiceInput
    skip: Int
    sort: SortFindOneServiceInput
  ): Service
  serviceMany(
    """Filter by fields"""
    filter: FilterFindManyServiceInput
    skip: Int
    limit: Int = 100
    sort: SortFindManyServiceInput
  ): [Service!]!
  serviceCount(
    """Filter by fields"""
    filter: FilterCountServiceInput
  ): Int
  serviceConnection(
    """Forward pagination argument for returning at most first edges"""
    first: Int

    """Forward pagination argument for returning at most first edges"""
    after: String

    """Backward pagination argument for returning at most last edges"""
    last: Int

    """Backward pagination argument for returning at most last edges"""
    before: String

    """Filter by fields"""
    filter: FilterFindManyServiceInput

    """Sort argument for data ordering"""
    sort: SortConnectionServiceEnum = _ID_DESC
  ): ServiceConnection
  servicePagination(
    """Page number for displaying"""
    page: Int

    """"""
    perPage: Int = 20

    """Filter by fields"""
    filter: FilterFindManyServiceInput
    sort: SortFindManyServiceInput
  ): ServicePagination
  logById(_id: MongoID!): Log
  logByIds(_ids: [MongoID!]!, limit: Int = 100, sort: SortFindByIdsLogInput): [Log!]!
  logOne(
    """Filter by fields"""
    filter: FilterFindOneLogInput
    skip: Int
    sort: SortFindOneLogInput
  ): Log
  logMany(
    """Filter by fields"""
    filter: FilterFindManyLogInput
    skip: Int
    limit: Int = 100
    sort: SortFindManyLogInput
  ): [Log!]!
  logCount(
    """Filter by fields"""
    filter: FilterCountLogInput
  ): Int
  logConnection(
    """Forward pagination argument for returning at most first edges"""
    first: Int

    """Forward pagination argument for returning at most first edges"""
    after: String

    """Backward pagination argument for returning at most last edges"""
    last: Int

    """Backward pagination argument for returning at most last edges"""
    before: String

    """Filter by fields"""
    filter: FilterFindManyLogInput

    """Sort argument for data ordering"""
    sort: SortConnectionLogEnum = _ID_DESC
  ): LogConnection
  logPagination(
    """Page number for displaying"""
    page: Int

    """"""
    perPage: Int = 20

    """Filter by fields"""
    filter: FilterFindManyLogInput
    sort: SortFindManyLogInput
  ): LogPagination
}

type Service {
  service: String!
  application: String!
  account: String!
  environments: JSON!
  tags: [String]
  _id: MongoID!
  updatedAt: Date
  createdAt: Date
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

"""
The `ID` scalar type represents a unique MongoDB identifier in collection. MongoDB by default use 12-byte ObjectId value (https://docs.mongodb.com/manual/reference/bson-types/#objectid). But MongoDB also may accepts string or integer as correct values for _id field.
"""
scalar MongoID

scalar Date

enum SortFindByIdsServiceInput {
  _ID_ASC
  _ID_DESC
  CREATEDAT_ASC
  CREATEDAT_DESC
  CREATEDAT__UPDATEDAT_ASC
  CREATEDAT__UPDATEDAT_DESC
}

""""""
input FilterFindOneServiceInput {
  service: String
  application: String
  account: String
  environments: JSON
  tags: [String]
  _id: MongoID
  updatedAt: Date
  createdAt: Date

  """List of *indexed* fields that can be filtered via operators."""
  _operators: FilterFindOneServiceOperatorsInput
  OR: [FilterFindOneServiceInput!]
  AND: [FilterFindOneServiceInput!]
}

"""For performance reason this type contains only *indexed* fields."""
input FilterFindOneServiceOperatorsInput {
  _id: FilterFindOneService_idOperatorsInput
  createdAt: FilterFindOneServiceCreatedAtOperatorsInput
}

input FilterFindOneService_idOperatorsInput {
  gt: MongoID
  gte: MongoID
  lt: MongoID
  lte: MongoID
  ne: MongoID
  in: [MongoID]
  nin: [MongoID]
  exists: Boolean
}

input FilterFindOneServiceCreatedAtOperatorsInput {
  gt: Date
  gte: Date
  lt: Date
  lte: Date
  ne: Date
  in: [Date]
  nin: [Date]
  exists: Boolean
}

enum SortFindOneServiceInput {
  _ID_ASC
  _ID_DESC
  CREATEDAT_ASC
  CREATEDAT_DESC
  CREATEDAT__UPDATEDAT_ASC
  CREATEDAT__UPDATEDAT_DESC
}

""""""
input FilterFindManyServiceInput {
  service: String
  application: String
  account: String
  environments: JSON
  tags: [String]
  _id: MongoID
  updatedAt: Date
  createdAt: Date

  """List of *indexed* fields that can be filtered via operators."""
  _operators: FilterFindManyServiceOperatorsInput
  OR: [FilterFindManyServiceInput!]
  AND: [FilterFindManyServiceInput!]
}

"""For performance reason this type contains only *indexed* fields."""
input FilterFindManyServiceOperatorsInput {
  _id: FilterFindManyService_idOperatorsInput
  createdAt: FilterFindManyServiceCreatedAtOperatorsInput
}

input FilterFindManyService_idOperatorsInput {
  gt: MongoID
  gte: MongoID
  lt: MongoID
  lte: MongoID
  ne: MongoID
  in: [MongoID]
  nin: [MongoID]
  exists: Boolean
}

input FilterFindManyServiceCreatedAtOperatorsInput {
  gt: Date
  gte: Date
  lt: Date
  lte: Date
  ne: Date
  in: [Date]
  nin: [Date]
  exists: Boolean
}

enum SortFindManyServiceInput {
  _ID_ASC
  _ID_DESC
  CREATEDAT_ASC
  CREATEDAT_DESC
  CREATEDAT__UPDATEDAT_ASC
  CREATEDAT__UPDATEDAT_DESC
}

""""""
input FilterCountServiceInput {
  service: String
  application: String
  account: String
  environments: JSON
  tags: [String]
  _id: MongoID
  updatedAt: Date
  createdAt: Date

  """List of *indexed* fields that can be filtered via operators."""
  _operators: FilterCountServiceOperatorsInput
  OR: [FilterCountServiceInput!]
  AND: [FilterCountServiceInput!]
}

"""For performance reason this type contains only *indexed* fields."""
input FilterCountServiceOperatorsInput {
  _id: FilterCountService_idOperatorsInput
  createdAt: FilterCountServiceCreatedAtOperatorsInput
}

input FilterCountService_idOperatorsInput {
  gt: MongoID
  gte: MongoID
  lt: MongoID
  lte: MongoID
  ne: MongoID
  in: [MongoID]
  nin: [MongoID]
  exists: Boolean
}

input FilterCountServiceCreatedAtOperatorsInput {
  gt: Date
  gte: Date
  lt: Date
  lte: Date
  ne: Date
  in: [Date]
  nin: [Date]
  exists: Boolean
}

"""A connection to a list of items."""
type ServiceConnection {
  """Total object count."""
  count: Int!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """Information to aid in pagination."""
  edges: [ServiceEdge!]!
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String

  """When paginating forwards, the cursor to continue."""
  endCursor: String
}

"""An edge in a connection."""
type ServiceEdge {
  """The item at the end of the edge"""
  node: Service!

  """A cursor for use in pagination"""
  cursor: String!
}

enum SortConnectionServiceEnum {
  _ID_DESC
  _ID_ASC
}

"""List of items with pagination."""
type ServicePagination {
  """Total object count."""
  count: Int

  """Array of objects."""
  items: [Service!]

  """Information to aid in pagination."""
  pageInfo: PaginationInfo!
}

type PaginationInfo {
  currentPage: Int!
  perPage: Int!
  pageCount: Int
  itemCount: Int
  hasNextPage: Boolean
  hasPreviousPage: Boolean
}

type Log {
  service: MongoID!
  status: String!
  version: String!
  hash: String!
  hashChain: String!
  _id: MongoID!
  updatedAt: Date
  createdAt: Date
}

enum SortFindByIdsLogInput {
  _ID_ASC
  _ID_DESC
  CREATEDAT_ASC
  CREATEDAT_DESC
  CREATEDAT__UPDATEDAT_ASC
  CREATEDAT__UPDATEDAT_DESC
}

""""""
input FilterFindOneLogInput {
  service: MongoID
  status: String
  version: String
  hash: String
  hashChain: String
  _id: MongoID
  updatedAt: Date
  createdAt: Date

  """List of *indexed* fields that can be filtered via operators."""
  _operators: FilterFindOneLogOperatorsInput
  OR: [FilterFindOneLogInput!]
  AND: [FilterFindOneLogInput!]
}

"""For performance reason this type contains only *indexed* fields."""
input FilterFindOneLogOperatorsInput {
  _id: FilterFindOneLog_idOperatorsInput
  createdAt: FilterFindOneLogCreatedAtOperatorsInput
}

input FilterFindOneLog_idOperatorsInput {
  gt: MongoID
  gte: MongoID
  lt: MongoID
  lte: MongoID
  ne: MongoID
  in: [MongoID]
  nin: [MongoID]
  exists: Boolean
}

input FilterFindOneLogCreatedAtOperatorsInput {
  gt: Date
  gte: Date
  lt: Date
  lte: Date
  ne: Date
  in: [Date]
  nin: [Date]
  exists: Boolean
}

enum SortFindOneLogInput {
  _ID_ASC
  _ID_DESC
  CREATEDAT_ASC
  CREATEDAT_DESC
  CREATEDAT__UPDATEDAT_ASC
  CREATEDAT__UPDATEDAT_DESC
}

""""""
input FilterFindManyLogInput {
  service: MongoID
  status: String
  version: String
  hash: String
  hashChain: String
  _id: MongoID
  updatedAt: Date
  createdAt: Date

  """List of *indexed* fields that can be filtered via operators."""
  _operators: FilterFindManyLogOperatorsInput
  OR: [FilterFindManyLogInput!]
  AND: [FilterFindManyLogInput!]
}

"""For performance reason this type contains only *indexed* fields."""
input FilterFindManyLogOperatorsInput {
  _id: FilterFindManyLog_idOperatorsInput
  createdAt: FilterFindManyLogCreatedAtOperatorsInput
}

input FilterFindManyLog_idOperatorsInput {
  gt: MongoID
  gte: MongoID
  lt: MongoID
  lte: MongoID
  ne: MongoID
  in: [MongoID]
  nin: [MongoID]
  exists: Boolean
}

input FilterFindManyLogCreatedAtOperatorsInput {
  gt: Date
  gte: Date
  lt: Date
  lte: Date
  ne: Date
  in: [Date]
  nin: [Date]
  exists: Boolean
}

enum SortFindManyLogInput {
  _ID_ASC
  _ID_DESC
  CREATEDAT_ASC
  CREATEDAT_DESC
  CREATEDAT__UPDATEDAT_ASC
  CREATEDAT__UPDATEDAT_DESC
}

""""""
input FilterCountLogInput {
  service: MongoID
  status: String
  version: String
  hash: String
  hashChain: String
  _id: MongoID
  updatedAt: Date
  createdAt: Date

  """List of *indexed* fields that can be filtered via operators."""
  _operators: FilterCountLogOperatorsInput
  OR: [FilterCountLogInput!]
  AND: [FilterCountLogInput!]
}

"""For performance reason this type contains only *indexed* fields."""
input FilterCountLogOperatorsInput {
  _id: FilterCountLog_idOperatorsInput
  createdAt: FilterCountLogCreatedAtOperatorsInput
}

input FilterCountLog_idOperatorsInput {
  gt: MongoID
  gte: MongoID
  lt: MongoID
  lte: MongoID
  ne: MongoID
  in: [MongoID]
  nin: [MongoID]
  exists: Boolean
}

input FilterCountLogCreatedAtOperatorsInput {
  gt: Date
  gte: Date
  lt: Date
  lte: Date
  ne: Date
  in: [Date]
  nin: [Date]
  exists: Boolean
}

"""A connection to a list of items."""
type LogConnection {
  """Total object count."""
  count: Int!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """Information to aid in pagination."""
  edges: [LogEdge!]!
}

"""An edge in a connection."""
type LogEdge {
  """The item at the end of the edge"""
  node: Log!

  """A cursor for use in pagination"""
  cursor: String!
}

enum SortConnectionLogEnum {
  _ID_DESC
  _ID_ASC
}

"""List of items with pagination."""
type LogPagination {
  """Total object count."""
  count: Int

  """Array of objects."""
  items: [Log!]

  """Information to aid in pagination."""
  pageInfo: PaginationInfo!
}

type Mutation {
  """
  Create one document with mongoose defaults, setters, hooks and validation
  """
  serviceCreateOne(record: CreateOneServiceInput!): CreateOneServicePayload

  """
  Creates Many documents with mongoose defaults, setters, hooks and validation
  """
  serviceCreateMany(records: [CreateManyServiceInput!]!): CreateManyServicePayload

  """
  Update one document: 1) Retrieve one document by findById. 2) Apply updates to mongoose document. 3) Mongoose applies defaults, setters, hooks and validation. 4) And save it.
  """
  serviceUpdateById(_id: MongoID!, record: UpdateByIdServiceInput!): UpdateByIdServicePayload

  """
  Update one document: 1) Retrieve one document via findOne. 2) Apply updates to mongoose document. 3) Mongoose applies defaults, setters, hooks and validation. 4) And save it.
  """
  serviceUpdateOne(
    record: UpdateOneServiceInput!

    """Filter by fields"""
    filter: FilterUpdateOneServiceInput
    sort: SortUpdateOneServiceInput
    skip: Int
  ): UpdateOneServicePayload

  """
  Update many documents without returning them: Use Query.update mongoose method. Do not apply mongoose defaults, setters, hooks and validation. 
  """
  serviceUpdateMany(
    record: UpdateManyServiceInput!

    """Filter by fields"""
    filter: FilterUpdateManyServiceInput
    sort: SortUpdateManyServiceInput
    skip: Int
    limit: Int = 100
  ): UpdateManyServicePayload

  """
  Remove one document: 1) Retrieve one document and remove with hooks via findByIdAndRemove. 2) Return removed document.
  """
  serviceRemoveById(_id: MongoID!): RemoveByIdServicePayload

  """
  Remove one document: 1) Remove with hooks via findOneAndRemove. 2) Return removed document.
  """
  serviceRemoveOne(
    """Filter by fields"""
    filter: FilterRemoveOneServiceInput
    sort: SortRemoveOneServiceInput
  ): RemoveOneServicePayload

  """
  Remove many documents without returning them: Use Query.remove mongoose method. Do not apply mongoose defaults, setters, hooks and validation. 
  """
  serviceRemoveMany(
    """Filter by fields"""
    filter: FilterRemoveManyServiceInput!
    limit: Int = 100
  ): RemoveManyServicePayload

  """
  Create one document with mongoose defaults, setters, hooks and validation
  """
  logCreateOne(record: CreateOneLogInput!): CreateOneLogPayload

  """
  Creates Many documents with mongoose defaults, setters, hooks and validation
  """
  logCreateMany(records: [CreateManyLogInput!]!): CreateManyLogPayload

  """
  Update one document: 1) Retrieve one document by findById. 2) Apply updates to mongoose document. 3) Mongoose applies defaults, setters, hooks and validation. 4) And save it.
  """
  logUpdateById(_id: MongoID!, record: UpdateByIdLogInput!): UpdateByIdLogPayload

  """
  Update one document: 1) Retrieve one document via findOne. 2) Apply updates to mongoose document. 3) Mongoose applies defaults, setters, hooks and validation. 4) And save it.
  """
  logUpdateOne(
    record: UpdateOneLogInput!

    """Filter by fields"""
    filter: FilterUpdateOneLogInput
    sort: SortUpdateOneLogInput
    skip: Int
  ): UpdateOneLogPayload

  """
  Update many documents without returning them: Use Query.update mongoose method. Do not apply mongoose defaults, setters, hooks and validation. 
  """
  logUpdateMany(
    record: UpdateManyLogInput!

    """Filter by fields"""
    filter: FilterUpdateManyLogInput
    sort: SortUpdateManyLogInput
    skip: Int
    limit: Int = 100
  ): UpdateManyLogPayload

  """
  Remove one document: 1) Retrieve one document and remove with hooks via findByIdAndRemove. 2) Return removed document.
  """
  logRemoveById(_id: MongoID!): RemoveByIdLogPayload

  """
  Remove one document: 1) Remove with hooks via findOneAndRemove. 2) Return removed document.
  """
  logRemoveOne(
    """Filter by fields"""
    filter: FilterRemoveOneLogInput
    sort: SortRemoveOneLogInput
  ): RemoveOneLogPayload

  """
  Remove many documents without returning them: Use Query.remove mongoose method. Do not apply mongoose defaults, setters, hooks and validation. 
  """
  logRemoveMany(
    """Filter by fields"""
    filter: FilterRemoveManyLogInput!
    limit: Int = 100
  ): RemoveManyLogPayload
}

type CreateOneServicePayload {
  """Document ID"""
  recordId: MongoID

  """Created document"""
  record: Service

  """
  Error that may occur during operation. If you request this field in GraphQL query, you will receive typed error in payload; otherwise error will be provided in root `errors` field of GraphQL response.
  """
  error: ErrorInterface
}

interface ErrorInterface {
  """Generic error message"""
  message: String
}

""""""
input CreateOneServiceInput {
  service: String!
  application: String!
  account: String!
  environments: JSON!
  tags: [String]
  updatedAt: Date
  createdAt: Date
}

type CreateManyServicePayload {
  """Documents IDs"""
  recordIds: [MongoID!]!

  """Created documents"""
  records: [Service!]

  """Number of created documents"""
  createdCount: Int!

  """
  Error that may occur during operation. If you request this field in GraphQL query, you will receive typed error in payload; otherwise error will be provided in root `errors` field of GraphQL response.
  """
  error: ErrorInterface
}

""""""
input CreateManyServiceInput {
  service: String!
  application: String!
  account: String!
  environments: JSON!
  tags: [String]
  updatedAt: Date
  createdAt: Date
}

type UpdateByIdServicePayload {
  """Document ID"""
  recordId: MongoID

  """Updated document"""
  record: Service

  """
  Error that may occur during operation. If you request this field in GraphQL query, you will receive typed error in payload; otherwise error will be provided in root `errors` field of GraphQL response.
  """
  error: ErrorInterface
}

""""""
input UpdateByIdServiceInput {
  service: String
  application: String
  account: String
  environments: JSON
  tags: [String]
  updatedAt: Date
  createdAt: Date
}

type UpdateOneServicePayload {
  """Document ID"""
  recordId: MongoID

  """Updated document"""
  record: Service

  """
  Error that may occur during operation. If you request this field in GraphQL query, you will receive typed error in payload; otherwise error will be provided in root `errors` field of GraphQL response.
  """
  error: ErrorInterface
}

""""""
input UpdateOneServiceInput {
  service: String
  application: String
  account: String
  environments: JSON
  tags: [String]
  updatedAt: Date
  createdAt: Date
}

""""""
input FilterUpdateOneServiceInput {
  service: String
  application: String
  account: String
  environments: JSON
  tags: [String]
  _id: MongoID
  updatedAt: Date
  createdAt: Date

  """List of *indexed* fields that can be filtered via operators."""
  _operators: FilterUpdateOneServiceOperatorsInput
  OR: [FilterUpdateOneServiceInput!]
  AND: [FilterUpdateOneServiceInput!]
}

"""For performance reason this type contains only *indexed* fields."""
input FilterUpdateOneServiceOperatorsInput {
  _id: FilterUpdateOneService_idOperatorsInput
  createdAt: FilterUpdateOneServiceCreatedAtOperatorsInput
}

input FilterUpdateOneService_idOperatorsInput {
  gt: MongoID
  gte: MongoID
  lt: MongoID
  lte: MongoID
  ne: MongoID
  in: [MongoID]
  nin: [MongoID]
  exists: Boolean
}

input FilterUpdateOneServiceCreatedAtOperatorsInput {
  gt: Date
  gte: Date
  lt: Date
  lte: Date
  ne: Date
  in: [Date]
  nin: [Date]
  exists: Boolean
}

enum SortUpdateOneServiceInput {
  _ID_ASC
  _ID_DESC
  CREATEDAT_ASC
  CREATEDAT_DESC
  CREATEDAT__UPDATEDAT_ASC
  CREATEDAT__UPDATEDAT_DESC
}

type UpdateManyServicePayload {
  """Affected documents number"""
  numAffected: Int

  """
  Error that may occur during operation. If you request this field in GraphQL query, you will receive typed error in payload; otherwise error will be provided in root `errors` field of GraphQL response.
  """
  error: ErrorInterface
}

""""""
input UpdateManyServiceInput {
  service: String
  application: String
  account: String
  environments: JSON
  tags: [String]
  updatedAt: Date
  createdAt: Date
}

""""""
input FilterUpdateManyServiceInput {
  service: String
  application: String
  account: String
  environments: JSON
  tags: [String]
  _id: MongoID
  updatedAt: Date
  createdAt: Date

  """List of *indexed* fields that can be filtered via operators."""
  _operators: FilterUpdateManyServiceOperatorsInput
  OR: [FilterUpdateManyServiceInput!]
  AND: [FilterUpdateManyServiceInput!]
}

"""For performance reason this type contains only *indexed* fields."""
input FilterUpdateManyServiceOperatorsInput {
  _id: FilterUpdateManyService_idOperatorsInput
  createdAt: FilterUpdateManyServiceCreatedAtOperatorsInput
}

input FilterUpdateManyService_idOperatorsInput {
  gt: MongoID
  gte: MongoID
  lt: MongoID
  lte: MongoID
  ne: MongoID
  in: [MongoID]
  nin: [MongoID]
  exists: Boolean
}

input FilterUpdateManyServiceCreatedAtOperatorsInput {
  gt: Date
  gte: Date
  lt: Date
  lte: Date
  ne: Date
  in: [Date]
  nin: [Date]
  exists: Boolean
}

enum SortUpdateManyServiceInput {
  _ID_ASC
  _ID_DESC
  CREATEDAT_ASC
  CREATEDAT_DESC
  CREATEDAT__UPDATEDAT_ASC
  CREATEDAT__UPDATEDAT_DESC
}

type RemoveByIdServicePayload {
  """Document ID"""
  recordId: MongoID

  """Removed document"""
  record: Service

  """
  Error that may occur during operation. If you request this field in GraphQL query, you will receive typed error in payload; otherwise error will be provided in root `errors` field of GraphQL response.
  """
  error: ErrorInterface
}

type RemoveOneServicePayload {
  """Document ID"""
  recordId: MongoID

  """Removed document"""
  record: Service

  """
  Error that may occur during operation. If you request this field in GraphQL query, you will receive typed error in payload; otherwise error will be provided in root `errors` field of GraphQL response.
  """
  error: ErrorInterface
}

""""""
input FilterRemoveOneServiceInput {
  service: String
  application: String
  account: String
  environments: JSON
  tags: [String]
  _id: MongoID
  updatedAt: Date
  createdAt: Date

  """List of *indexed* fields that can be filtered via operators."""
  _operators: FilterRemoveOneServiceOperatorsInput
  OR: [FilterRemoveOneServiceInput!]
  AND: [FilterRemoveOneServiceInput!]
}

"""For performance reason this type contains only *indexed* fields."""
input FilterRemoveOneServiceOperatorsInput {
  _id: FilterRemoveOneService_idOperatorsInput
  createdAt: FilterRemoveOneServiceCreatedAtOperatorsInput
}

input FilterRemoveOneService_idOperatorsInput {
  gt: MongoID
  gte: MongoID
  lt: MongoID
  lte: MongoID
  ne: MongoID
  in: [MongoID]
  nin: [MongoID]
  exists: Boolean
}

input FilterRemoveOneServiceCreatedAtOperatorsInput {
  gt: Date
  gte: Date
  lt: Date
  lte: Date
  ne: Date
  in: [Date]
  nin: [Date]
  exists: Boolean
}

enum SortRemoveOneServiceInput {
  _ID_ASC
  _ID_DESC
  CREATEDAT_ASC
  CREATEDAT_DESC
  CREATEDAT__UPDATEDAT_ASC
  CREATEDAT__UPDATEDAT_DESC
}

type RemoveManyServicePayload {
  """Affected documents number"""
  numAffected: Int

  """
  Error that may occur during operation. If you request this field in GraphQL query, you will receive typed error in payload; otherwise error will be provided in root `errors` field of GraphQL response.
  """
  error: ErrorInterface
}

""""""
input FilterRemoveManyServiceInput {
  service: String
  application: String
  account: String
  environments: JSON
  tags: [String]
  _id: MongoID
  updatedAt: Date
  createdAt: Date

  """List of *indexed* fields that can be filtered via operators."""
  _operators: FilterRemoveManyServiceOperatorsInput
  OR: [FilterRemoveManyServiceInput!]
  AND: [FilterRemoveManyServiceInput!]
}

"""For performance reason this type contains only *indexed* fields."""
input FilterRemoveManyServiceOperatorsInput {
  _id: FilterRemoveManyService_idOperatorsInput
  createdAt: FilterRemoveManyServiceCreatedAtOperatorsInput
}

input FilterRemoveManyService_idOperatorsInput {
  gt: MongoID
  gte: MongoID
  lt: MongoID
  lte: MongoID
  ne: MongoID
  in: [MongoID]
  nin: [MongoID]
  exists: Boolean
}

input FilterRemoveManyServiceCreatedAtOperatorsInput {
  gt: Date
  gte: Date
  lt: Date
  lte: Date
  ne: Date
  in: [Date]
  nin: [Date]
  exists: Boolean
}

type CreateOneLogPayload {
  """Document ID"""
  recordId: MongoID

  """Created document"""
  record: Log

  """
  Error that may occur during operation. If you request this field in GraphQL query, you will receive typed error in payload; otherwise error will be provided in root `errors` field of GraphQL response.
  """
  error: ErrorInterface
}

""""""
input CreateOneLogInput {
  service: MongoID!
  status: String!
  version: String!
  hash: String!
  hashChain: String!
  updatedAt: Date
  createdAt: Date
}

type CreateManyLogPayload {
  """Documents IDs"""
  recordIds: [MongoID!]!

  """Created documents"""
  records: [Log!]

  """Number of created documents"""
  createdCount: Int!

  """
  Error that may occur during operation. If you request this field in GraphQL query, you will receive typed error in payload; otherwise error will be provided in root `errors` field of GraphQL response.
  """
  error: ErrorInterface
}

""""""
input CreateManyLogInput {
  service: MongoID!
  status: String!
  version: String!
  hash: String!
  hashChain: String!
  updatedAt: Date
  createdAt: Date
}

type UpdateByIdLogPayload {
  """Document ID"""
  recordId: MongoID

  """Updated document"""
  record: Log

  """
  Error that may occur during operation. If you request this field in GraphQL query, you will receive typed error in payload; otherwise error will be provided in root `errors` field of GraphQL response.
  """
  error: ErrorInterface
}

""""""
input UpdateByIdLogInput {
  service: MongoID
  status: String
  version: String
  hash: String
  hashChain: String
  updatedAt: Date
  createdAt: Date
}

type UpdateOneLogPayload {
  """Document ID"""
  recordId: MongoID

  """Updated document"""
  record: Log

  """
  Error that may occur during operation. If you request this field in GraphQL query, you will receive typed error in payload; otherwise error will be provided in root `errors` field of GraphQL response.
  """
  error: ErrorInterface
}

""""""
input UpdateOneLogInput {
  service: MongoID
  status: String
  version: String
  hash: String
  hashChain: String
  updatedAt: Date
  createdAt: Date
}

""""""
input FilterUpdateOneLogInput {
  service: MongoID
  status: String
  version: String
  hash: String
  hashChain: String
  _id: MongoID
  updatedAt: Date
  createdAt: Date

  """List of *indexed* fields that can be filtered via operators."""
  _operators: FilterUpdateOneLogOperatorsInput
  OR: [FilterUpdateOneLogInput!]
  AND: [FilterUpdateOneLogInput!]
}

"""For performance reason this type contains only *indexed* fields."""
input FilterUpdateOneLogOperatorsInput {
  _id: FilterUpdateOneLog_idOperatorsInput
  createdAt: FilterUpdateOneLogCreatedAtOperatorsInput
}

input FilterUpdateOneLog_idOperatorsInput {
  gt: MongoID
  gte: MongoID
  lt: MongoID
  lte: MongoID
  ne: MongoID
  in: [MongoID]
  nin: [MongoID]
  exists: Boolean
}

input FilterUpdateOneLogCreatedAtOperatorsInput {
  gt: Date
  gte: Date
  lt: Date
  lte: Date
  ne: Date
  in: [Date]
  nin: [Date]
  exists: Boolean
}

enum SortUpdateOneLogInput {
  _ID_ASC
  _ID_DESC
  CREATEDAT_ASC
  CREATEDAT_DESC
  CREATEDAT__UPDATEDAT_ASC
  CREATEDAT__UPDATEDAT_DESC
}

type UpdateManyLogPayload {
  """Affected documents number"""
  numAffected: Int

  """
  Error that may occur during operation. If you request this field in GraphQL query, you will receive typed error in payload; otherwise error will be provided in root `errors` field of GraphQL response.
  """
  error: ErrorInterface
}

""""""
input UpdateManyLogInput {
  service: MongoID
  status: String
  version: String
  hash: String
  hashChain: String
  updatedAt: Date
  createdAt: Date
}

""""""
input FilterUpdateManyLogInput {
  service: MongoID
  status: String
  version: String
  hash: String
  hashChain: String
  _id: MongoID
  updatedAt: Date
  createdAt: Date

  """List of *indexed* fields that can be filtered via operators."""
  _operators: FilterUpdateManyLogOperatorsInput
  OR: [FilterUpdateManyLogInput!]
  AND: [FilterUpdateManyLogInput!]
}

"""For performance reason this type contains only *indexed* fields."""
input FilterUpdateManyLogOperatorsInput {
  _id: FilterUpdateManyLog_idOperatorsInput
  createdAt: FilterUpdateManyLogCreatedAtOperatorsInput
}

input FilterUpdateManyLog_idOperatorsInput {
  gt: MongoID
  gte: MongoID
  lt: MongoID
  lte: MongoID
  ne: MongoID
  in: [MongoID]
  nin: [MongoID]
  exists: Boolean
}

input FilterUpdateManyLogCreatedAtOperatorsInput {
  gt: Date
  gte: Date
  lt: Date
  lte: Date
  ne: Date
  in: [Date]
  nin: [Date]
  exists: Boolean
}

enum SortUpdateManyLogInput {
  _ID_ASC
  _ID_DESC
  CREATEDAT_ASC
  CREATEDAT_DESC
  CREATEDAT__UPDATEDAT_ASC
  CREATEDAT__UPDATEDAT_DESC
}

type RemoveByIdLogPayload {
  """Document ID"""
  recordId: MongoID

  """Removed document"""
  record: Log

  """
  Error that may occur during operation. If you request this field in GraphQL query, you will receive typed error in payload; otherwise error will be provided in root `errors` field of GraphQL response.
  """
  error: ErrorInterface
}

type RemoveOneLogPayload {
  """Document ID"""
  recordId: MongoID

  """Removed document"""
  record: Log

  """
  Error that may occur during operation. If you request this field in GraphQL query, you will receive typed error in payload; otherwise error will be provided in root `errors` field of GraphQL response.
  """
  error: ErrorInterface
}

""""""
input FilterRemoveOneLogInput {
  service: MongoID
  status: String
  version: String
  hash: String
  hashChain: String
  _id: MongoID
  updatedAt: Date
  createdAt: Date

  """List of *indexed* fields that can be filtered via operators."""
  _operators: FilterRemoveOneLogOperatorsInput
  OR: [FilterRemoveOneLogInput!]
  AND: [FilterRemoveOneLogInput!]
}

"""For performance reason this type contains only *indexed* fields."""
input FilterRemoveOneLogOperatorsInput {
  _id: FilterRemoveOneLog_idOperatorsInput
  createdAt: FilterRemoveOneLogCreatedAtOperatorsInput
}

input FilterRemoveOneLog_idOperatorsInput {
  gt: MongoID
  gte: MongoID
  lt: MongoID
  lte: MongoID
  ne: MongoID
  in: [MongoID]
  nin: [MongoID]
  exists: Boolean
}

input FilterRemoveOneLogCreatedAtOperatorsInput {
  gt: Date
  gte: Date
  lt: Date
  lte: Date
  ne: Date
  in: [Date]
  nin: [Date]
  exists: Boolean
}

enum SortRemoveOneLogInput {
  _ID_ASC
  _ID_DESC
  CREATEDAT_ASC
  CREATEDAT_DESC
  CREATEDAT__UPDATEDAT_ASC
  CREATEDAT__UPDATEDAT_DESC
}

type RemoveManyLogPayload {
  """Affected documents number"""
  numAffected: Int

  """
  Error that may occur during operation. If you request this field in GraphQL query, you will receive typed error in payload; otherwise error will be provided in root `errors` field of GraphQL response.
  """
  error: ErrorInterface
}

""""""
input FilterRemoveManyLogInput {
  service: MongoID
  status: String
  version: String
  hash: String
  hashChain: String
  _id: MongoID
  updatedAt: Date
  createdAt: Date

  """List of *indexed* fields that can be filtered via operators."""
  _operators: FilterRemoveManyLogOperatorsInput
  OR: [FilterRemoveManyLogInput!]
  AND: [FilterRemoveManyLogInput!]
}

"""For performance reason this type contains only *indexed* fields."""
input FilterRemoveManyLogOperatorsInput {
  _id: FilterRemoveManyLog_idOperatorsInput
  createdAt: FilterRemoveManyLogCreatedAtOperatorsInput
}

input FilterRemoveManyLog_idOperatorsInput {
  gt: MongoID
  gte: MongoID
  lt: MongoID
  lte: MongoID
  ne: MongoID
  in: [MongoID]
  nin: [MongoID]
  exists: Boolean
}

input FilterRemoveManyLogCreatedAtOperatorsInput {
  gt: Date
  gte: Date
  lt: Date
  lte: Date
  ne: Date
  in: [Date]
  nin: [Date]
  exists: Boolean
}
