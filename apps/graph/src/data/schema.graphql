type Query {
  serviceById(_id: MongoID!): Service
  serviceByIds(_ids: [MongoID!]!, limit: Int = 100, sort: SortFindByIdsServiceInput): [Service!]!
  serviceOne(
    """Filter by fields"""
    filter: FilterFindOneServiceInput
    skip: Int
    sort: SortFindOneServiceInput
  ): Service
  serviceMany(
    """Filter by fields"""
    filter: FilterFindManyServiceInput
    skip: Int
    limit: Int = 100
    sort: SortFindManyServiceInput
  ): [Service!]!
  serviceCount(
    """Filter by fields"""
    filter: FilterCountServiceInput
  ): Int
  serviceConnection(
    """Forward pagination argument for returning at most first edges"""
    first: Int

    """Forward pagination argument for returning at most first edges"""
    after: String

    """Backward pagination argument for returning at most last edges"""
    last: Int

    """Backward pagination argument for returning at most last edges"""
    before: String

    """Filter by fields"""
    filter: FilterFindManyServiceInput

    """Sort argument for data ordering"""
    sort: SortConnectionServiceEnum = _ID_DESC
  ): ServiceConnection
  servicePagination(
    """Page number for displaying"""
    page: Int

    """"""
    perPage: Int = 20

    """Filter by fields"""
    filter: FilterFindManyServiceInput
    sort: SortFindManyServiceInput
  ): ServicePagination
  logById(_id: MongoID!): Log
  logByIds(_ids: [MongoID!]!, limit: Int = 100, sort: SortFindByIdsLogInput): [Log!]!
  logOne(
    """Filter by fields"""
    filter: FilterFindOneLogInput
    skip: Int
    sort: SortFindOneLogInput
  ): Log
  logMany(
    """Filter by fields"""
    filter: FilterFindManyLogInput
    skip: Int
    limit: Int = 100
    sort: SortFindManyLogInput
  ): [Log!]!
  logCount(
    """Filter by fields"""
    filter: FilterCountLogInput
  ): Int
  logConnection(
    """Forward pagination argument for returning at most first edges"""
    first: Int

    """Forward pagination argument for returning at most first edges"""
    after: String

    """Backward pagination argument for returning at most last edges"""
    last: Int

    """Backward pagination argument for returning at most last edges"""
    before: String

    """Filter by fields"""
    filter: FilterFindManyLogInput

    """Sort argument for data ordering"""
    sort: SortConnectionLogEnum = _ID_DESC
  ): LogConnection
  logPagination(
    """Page number for displaying"""
    page: Int

    """"""
    perPage: Int = 20

    """Filter by fields"""
    filter: FilterFindManyLogInput
    sort: SortFindManyLogInput
  ): LogPagination
  accountById(_id: MongoID!): Account
  accountByIds(_ids: [MongoID!]!, limit: Int = 100, sort: SortFindByIdsAccountInput): [Account!]!
  accountOne(
    """Filter by fields"""
    filter: FilterFindOneAccountInput
    skip: Int
    sort: SortFindOneAccountInput
  ): Account
  accountMany(
    """Filter by fields"""
    filter: FilterFindManyAccountInput
    skip: Int
    limit: Int = 100
    sort: SortFindManyAccountInput
  ): [Account!]!
  accountCount(
    """Filter by fields"""
    filter: FilterCountAccountInput
  ): Int
  accountConnection(
    """Forward pagination argument for returning at most first edges"""
    first: Int

    """Forward pagination argument for returning at most first edges"""
    after: String

    """Backward pagination argument for returning at most last edges"""
    last: Int

    """Backward pagination argument for returning at most last edges"""
    before: String

    """Filter by fields"""
    filter: FilterFindManyAccountInput

    """Sort argument for data ordering"""
    sort: SortConnectionAccountEnum = _ID_DESC
  ): AccountConnection
  accountPagination(
    """Page number for displaying"""
    page: Int

    """"""
    perPage: Int = 20

    """Filter by fields"""
    filter: FilterFindManyAccountInput
    sort: SortFindManyAccountInput
  ): AccountPagination
  userById(_id: MongoID!): User
  userByIds(_ids: [MongoID!]!, limit: Int = 100, sort: SortFindByIdsUserInput): [User!]!
  userOne(
    """Filter by fields"""
    filter: FilterFindOneUserInput
    skip: Int
    sort: SortFindOneUserInput
  ): User
  userMany(
    """Filter by fields"""
    filter: FilterFindManyUserInput
    skip: Int
    limit: Int = 100
    sort: SortFindManyUserInput
  ): [User!]!
  userCount(
    """Filter by fields"""
    filter: FilterCountUserInput
  ): Int
  userConnection(
    """Forward pagination argument for returning at most first edges"""
    first: Int

    """Forward pagination argument for returning at most first edges"""
    after: String

    """Backward pagination argument for returning at most last edges"""
    last: Int

    """Backward pagination argument for returning at most last edges"""
    before: String

    """Filter by fields"""
    filter: FilterFindManyUserInput

    """Sort argument for data ordering"""
    sort: SortConnectionUserEnum = _ID_DESC
  ): UserConnection
  userPagination(
    """Page number for displaying"""
    page: Int

    """"""
    perPage: Int = 20

    """Filter by fields"""
    filter: FilterFindManyUserInput
    sort: SortFindManyUserInput
  ): UserPagination
  teamById(_id: MongoID!): Team
  teamByIds(_ids: [MongoID!]!, limit: Int = 100, sort: SortFindByIdsTeamInput): [Team!]!
  teamOne(
    """Filter by fields"""
    filter: FilterFindOneTeamInput
    skip: Int
    sort: SortFindOneTeamInput
  ): Team
  teamMany(
    """Filter by fields"""
    filter: FilterFindManyTeamInput
    skip: Int
    limit: Int = 100
    sort: SortFindManyTeamInput
  ): [Team!]!
  teamCount(
    """Filter by fields"""
    filter: FilterCountTeamInput
  ): Int
  teamConnection(
    """Forward pagination argument for returning at most first edges"""
    first: Int

    """Forward pagination argument for returning at most first edges"""
    after: String

    """Backward pagination argument for returning at most last edges"""
    last: Int

    """Backward pagination argument for returning at most last edges"""
    before: String

    """Filter by fields"""
    filter: FilterFindManyTeamInput

    """Sort argument for data ordering"""
    sort: SortConnectionTeamEnum = _ID_DESC
  ): TeamConnection
  teamPagination(
    """Page number for displaying"""
    page: Int

    """"""
    perPage: Int = 20

    """Filter by fields"""
    filter: FilterFindManyTeamInput
    sort: SortFindManyTeamInput
  ): TeamPagination
  apiKeyById(_id: MongoID!): ApiKey
  apiKeyByIds(_ids: [MongoID!]!, limit: Int = 100, sort: SortFindByIdsApiKeyInput): [ApiKey!]!
  apiKeyOne(
    """Filter by fields"""
    filter: FilterFindOneApiKeyInput
    skip: Int
    sort: SortFindOneApiKeyInput
  ): ApiKey
  apiKeyMany(
    """Filter by fields"""
    filter: FilterFindManyApiKeyInput
    skip: Int
    limit: Int = 100
    sort: SortFindManyApiKeyInput
  ): [ApiKey!]!
  apiKeyCount(
    """Filter by fields"""
    filter: FilterCountApiKeyInput
  ): Int
  apiKeyConnection(
    """Forward pagination argument for returning at most first edges"""
    first: Int

    """Forward pagination argument for returning at most first edges"""
    after: String

    """Backward pagination argument for returning at most last edges"""
    last: Int

    """Backward pagination argument for returning at most last edges"""
    before: String

    """Filter by fields"""
    filter: FilterFindManyApiKeyInput

    """Sort argument for data ordering"""
    sort: SortConnectionApiKeyEnum = _ID_DESC
  ): ApiKeyConnection
  apiKeyPagination(
    """Page number for displaying"""
    page: Int

    """"""
    perPage: Int = 20

    """Filter by fields"""
    filter: FilterFindManyApiKeyInput
    sort: SortFindManyApiKeyInput
  ): ApiKeyPagination
}

type Service {
  account: String!
  service: String!
  environments: [ServiceEnvironments]
  team: String
  tags: [String]
  _id: MongoID!
  updatedAt: Date
  createdAt: Date
}

type ServiceEnvironments {
  name: String
  status: String
  version: String
  timestamp: Date
  custom: JSON
  _id: MongoID
}

scalar Date

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON

"""
The `ID` scalar type represents a unique MongoDB identifier in collection. MongoDB by default use 12-byte ObjectId value (https://docs.mongodb.com/manual/reference/bson-types/#objectid). But MongoDB also may accepts string or integer as correct values for _id field.
"""
scalar MongoID

enum SortFindByIdsServiceInput {
  _ID_ASC
  _ID_DESC
}

""""""
input FilterFindOneServiceInput {
  account: String
  service: String
  environments: [FilterFindOneServiceEnvironmentsInput]
  team: String
  tags: [String]
  _id: MongoID
  updatedAt: Date
  createdAt: Date

  """List of *indexed* fields that can be filtered via operators."""
  _operators: FilterFindOneServiceOperatorsInput
  OR: [FilterFindOneServiceInput!]
  AND: [FilterFindOneServiceInput!]
}

""""""
input FilterFindOneServiceEnvironmentsInput {
  name: String
  status: String
  version: String
  timestamp: Date
  custom: JSON
  _id: MongoID
}

"""For performance reason this type contains only *indexed* fields."""
input FilterFindOneServiceOperatorsInput {
  _id: FilterFindOneService_idOperatorsInput
}

input FilterFindOneService_idOperatorsInput {
  gt: MongoID
  gte: MongoID
  lt: MongoID
  lte: MongoID
  ne: MongoID
  in: [MongoID]
  nin: [MongoID]
  exists: Boolean
}

enum SortFindOneServiceInput {
  _ID_ASC
  _ID_DESC
}

""""""
input FilterFindManyServiceInput {
  account: String
  service: String
  environments: [FilterFindManyServiceEnvironmentsInput]
  team: String
  tags: [String]
  _id: MongoID
  updatedAt: Date
  createdAt: Date

  """List of *indexed* fields that can be filtered via operators."""
  _operators: FilterFindManyServiceOperatorsInput
  OR: [FilterFindManyServiceInput!]
  AND: [FilterFindManyServiceInput!]
}

""""""
input FilterFindManyServiceEnvironmentsInput {
  name: String
  status: String
  version: String
  timestamp: Date
  custom: JSON
  _id: MongoID
}

"""For performance reason this type contains only *indexed* fields."""
input FilterFindManyServiceOperatorsInput {
  _id: FilterFindManyService_idOperatorsInput
}

input FilterFindManyService_idOperatorsInput {
  gt: MongoID
  gte: MongoID
  lt: MongoID
  lte: MongoID
  ne: MongoID
  in: [MongoID]
  nin: [MongoID]
  exists: Boolean
}

enum SortFindManyServiceInput {
  _ID_ASC
  _ID_DESC
}

""""""
input FilterCountServiceInput {
  account: String
  service: String
  environments: [FilterCountServiceEnvironmentsInput]
  team: String
  tags: [String]
  _id: MongoID
  updatedAt: Date
  createdAt: Date

  """List of *indexed* fields that can be filtered via operators."""
  _operators: FilterCountServiceOperatorsInput
  OR: [FilterCountServiceInput!]
  AND: [FilterCountServiceInput!]
}

""""""
input FilterCountServiceEnvironmentsInput {
  name: String
  status: String
  version: String
  timestamp: Date
  custom: JSON
  _id: MongoID
}

"""For performance reason this type contains only *indexed* fields."""
input FilterCountServiceOperatorsInput {
  _id: FilterCountService_idOperatorsInput
}

input FilterCountService_idOperatorsInput {
  gt: MongoID
  gte: MongoID
  lt: MongoID
  lte: MongoID
  ne: MongoID
  in: [MongoID]
  nin: [MongoID]
  exists: Boolean
}

"""A connection to a list of items."""
type ServiceConnection {
  """Total object count."""
  count: Int!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """Information to aid in pagination."""
  edges: [ServiceEdge!]!
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String

  """When paginating forwards, the cursor to continue."""
  endCursor: String
}

"""An edge in a connection."""
type ServiceEdge {
  """The item at the end of the edge"""
  node: Service!

  """A cursor for use in pagination"""
  cursor: String!
}

enum SortConnectionServiceEnum {
  _ID_DESC
  _ID_ASC
}

"""List of items with pagination."""
type ServicePagination {
  """Total object count."""
  count: Int

  """Array of objects."""
  items: [Service!]

  """Information to aid in pagination."""
  pageInfo: PaginationInfo!
}

type PaginationInfo {
  currentPage: Int!
  perPage: Int!
  pageCount: Int
  itemCount: Int
  hasNextPage: Boolean
  hasPreviousPage: Boolean
}

type Log {
  account: String!
  service: String!
  environment: String!
  status: String!
  version: String!
  _id: MongoID!
  updatedAt: Date
  createdAt: Date
}

enum SortFindByIdsLogInput {
  _ID_ASC
  _ID_DESC
  CREATEDAT_ASC
  CREATEDAT_DESC
  CREATEDAT__UPDATEDAT_ASC
  CREATEDAT__UPDATEDAT_DESC
}

""""""
input FilterFindOneLogInput {
  account: String
  service: String
  environment: String
  status: String
  version: String
  _id: MongoID
  updatedAt: Date
  createdAt: Date

  """List of *indexed* fields that can be filtered via operators."""
  _operators: FilterFindOneLogOperatorsInput
  OR: [FilterFindOneLogInput!]
  AND: [FilterFindOneLogInput!]
}

"""For performance reason this type contains only *indexed* fields."""
input FilterFindOneLogOperatorsInput {
  _id: FilterFindOneLog_idOperatorsInput
  createdAt: FilterFindOneLogCreatedAtOperatorsInput
}

input FilterFindOneLog_idOperatorsInput {
  gt: MongoID
  gte: MongoID
  lt: MongoID
  lte: MongoID
  ne: MongoID
  in: [MongoID]
  nin: [MongoID]
  exists: Boolean
}

input FilterFindOneLogCreatedAtOperatorsInput {
  gt: Date
  gte: Date
  lt: Date
  lte: Date
  ne: Date
  in: [Date]
  nin: [Date]
  exists: Boolean
}

enum SortFindOneLogInput {
  _ID_ASC
  _ID_DESC
  CREATEDAT_ASC
  CREATEDAT_DESC
  CREATEDAT__UPDATEDAT_ASC
  CREATEDAT__UPDATEDAT_DESC
}

""""""
input FilterFindManyLogInput {
  account: String
  service: String
  environment: String
  status: String
  version: String
  _id: MongoID
  updatedAt: Date
  createdAt: Date

  """List of *indexed* fields that can be filtered via operators."""
  _operators: FilterFindManyLogOperatorsInput
  OR: [FilterFindManyLogInput!]
  AND: [FilterFindManyLogInput!]
}

"""For performance reason this type contains only *indexed* fields."""
input FilterFindManyLogOperatorsInput {
  _id: FilterFindManyLog_idOperatorsInput
  createdAt: FilterFindManyLogCreatedAtOperatorsInput
}

input FilterFindManyLog_idOperatorsInput {
  gt: MongoID
  gte: MongoID
  lt: MongoID
  lte: MongoID
  ne: MongoID
  in: [MongoID]
  nin: [MongoID]
  exists: Boolean
}

input FilterFindManyLogCreatedAtOperatorsInput {
  gt: Date
  gte: Date
  lt: Date
  lte: Date
  ne: Date
  in: [Date]
  nin: [Date]
  exists: Boolean
}

enum SortFindManyLogInput {
  _ID_ASC
  _ID_DESC
  CREATEDAT_ASC
  CREATEDAT_DESC
  CREATEDAT__UPDATEDAT_ASC
  CREATEDAT__UPDATEDAT_DESC
}

""""""
input FilterCountLogInput {
  account: String
  service: String
  environment: String
  status: String
  version: String
  _id: MongoID
  updatedAt: Date
  createdAt: Date

  """List of *indexed* fields that can be filtered via operators."""
  _operators: FilterCountLogOperatorsInput
  OR: [FilterCountLogInput!]
  AND: [FilterCountLogInput!]
}

"""For performance reason this type contains only *indexed* fields."""
input FilterCountLogOperatorsInput {
  _id: FilterCountLog_idOperatorsInput
  createdAt: FilterCountLogCreatedAtOperatorsInput
}

input FilterCountLog_idOperatorsInput {
  gt: MongoID
  gte: MongoID
  lt: MongoID
  lte: MongoID
  ne: MongoID
  in: [MongoID]
  nin: [MongoID]
  exists: Boolean
}

input FilterCountLogCreatedAtOperatorsInput {
  gt: Date
  gte: Date
  lt: Date
  lte: Date
  ne: Date
  in: [Date]
  nin: [Date]
  exists: Boolean
}

"""A connection to a list of items."""
type LogConnection {
  """Total object count."""
  count: Int!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """Information to aid in pagination."""
  edges: [LogEdge!]!
}

"""An edge in a connection."""
type LogEdge {
  """The item at the end of the edge"""
  node: Log!

  """A cursor for use in pagination"""
  cursor: String!
}

enum SortConnectionLogEnum {
  _ID_DESC
  _ID_ASC
}

"""List of items with pagination."""
type LogPagination {
  """Total object count."""
  count: Int

  """Array of objects."""
  items: [Log!]

  """Information to aid in pagination."""
  pageInfo: PaginationInfo!
}

type Account {
  name: String!
  environments: [String]
  passwordPolicy: AccountPasswordPolicy!
  auth: String!
  _id: MongoID!
  updatedAt: Date
  createdAt: Date
}

type AccountPasswordPolicy {
  length: Float
  lowercase: Float
  uppercase: Float
  number: Float
  special: Float
  _id: MongoID
}

enum SortFindByIdsAccountInput {
  _ID_ASC
  _ID_DESC
  NAME_ASC
  NAME_DESC
}

""""""
input FilterFindOneAccountInput {
  name: String
  environments: [String]
  passwordPolicy: FilterFindOneAccountPasswordPolicyInput
  auth: String
  _id: MongoID
  updatedAt: Date
  createdAt: Date

  """List of *indexed* fields that can be filtered via operators."""
  _operators: FilterFindOneAccountOperatorsInput
  OR: [FilterFindOneAccountInput!]
  AND: [FilterFindOneAccountInput!]
}

""""""
input FilterFindOneAccountPasswordPolicyInput {
  length: Float
  lowercase: Float
  uppercase: Float
  number: Float
  special: Float
  _id: MongoID
}

"""For performance reason this type contains only *indexed* fields."""
input FilterFindOneAccountOperatorsInput {
  name: FilterFindOneAccountNameOperatorsInput
  _id: FilterFindOneAccount_idOperatorsInput
}

input FilterFindOneAccountNameOperatorsInput {
  gt: String
  gte: String
  lt: String
  lte: String
  ne: String
  in: [String]
  nin: [String]
  regex: RegExpAsString
  exists: Boolean
}

"""
The string representation of JavaScript regexp. You may provide it with flags "/^abc.*/i" or without flags like "^abc.*". More info about RegExp characters and flags: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions
"""
scalar RegExpAsString @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-262.pdf")

input FilterFindOneAccount_idOperatorsInput {
  gt: MongoID
  gte: MongoID
  lt: MongoID
  lte: MongoID
  ne: MongoID
  in: [MongoID]
  nin: [MongoID]
  exists: Boolean
}

enum SortFindOneAccountInput {
  _ID_ASC
  _ID_DESC
  NAME_ASC
  NAME_DESC
}

""""""
input FilterFindManyAccountInput {
  name: String
  environments: [String]
  passwordPolicy: FilterFindManyAccountPasswordPolicyInput
  auth: String
  _id: MongoID
  updatedAt: Date
  createdAt: Date

  """List of *indexed* fields that can be filtered via operators."""
  _operators: FilterFindManyAccountOperatorsInput
  OR: [FilterFindManyAccountInput!]
  AND: [FilterFindManyAccountInput!]
}

""""""
input FilterFindManyAccountPasswordPolicyInput {
  length: Float
  lowercase: Float
  uppercase: Float
  number: Float
  special: Float
  _id: MongoID
}

"""For performance reason this type contains only *indexed* fields."""
input FilterFindManyAccountOperatorsInput {
  name: FilterFindManyAccountNameOperatorsInput
  _id: FilterFindManyAccount_idOperatorsInput
}

input FilterFindManyAccountNameOperatorsInput {
  gt: String
  gte: String
  lt: String
  lte: String
  ne: String
  in: [String]
  nin: [String]
  regex: RegExpAsString
  exists: Boolean
}

input FilterFindManyAccount_idOperatorsInput {
  gt: MongoID
  gte: MongoID
  lt: MongoID
  lte: MongoID
  ne: MongoID
  in: [MongoID]
  nin: [MongoID]
  exists: Boolean
}

enum SortFindManyAccountInput {
  _ID_ASC
  _ID_DESC
  NAME_ASC
  NAME_DESC
}

""""""
input FilterCountAccountInput {
  name: String
  environments: [String]
  passwordPolicy: FilterCountAccountPasswordPolicyInput
  auth: String
  _id: MongoID
  updatedAt: Date
  createdAt: Date

  """List of *indexed* fields that can be filtered via operators."""
  _operators: FilterCountAccountOperatorsInput
  OR: [FilterCountAccountInput!]
  AND: [FilterCountAccountInput!]
}

""""""
input FilterCountAccountPasswordPolicyInput {
  length: Float
  lowercase: Float
  uppercase: Float
  number: Float
  special: Float
  _id: MongoID
}

"""For performance reason this type contains only *indexed* fields."""
input FilterCountAccountOperatorsInput {
  name: FilterCountAccountNameOperatorsInput
  _id: FilterCountAccount_idOperatorsInput
}

input FilterCountAccountNameOperatorsInput {
  gt: String
  gte: String
  lt: String
  lte: String
  ne: String
  in: [String]
  nin: [String]
  regex: RegExpAsString
  exists: Boolean
}

input FilterCountAccount_idOperatorsInput {
  gt: MongoID
  gte: MongoID
  lt: MongoID
  lte: MongoID
  ne: MongoID
  in: [MongoID]
  nin: [MongoID]
  exists: Boolean
}

"""A connection to a list of items."""
type AccountConnection {
  """Total object count."""
  count: Int!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """Information to aid in pagination."""
  edges: [AccountEdge!]!
}

"""An edge in a connection."""
type AccountEdge {
  """The item at the end of the edge"""
  node: Account!

  """A cursor for use in pagination"""
  cursor: String!
}

enum SortConnectionAccountEnum {
  _ID_DESC
  _ID_ASC
  NAME_DESC
  NAME_ASC
}

"""List of items with pagination."""
type AccountPagination {
  """Total object count."""
  count: Int

  """Array of objects."""
  items: [Account!]

  """Information to aid in pagination."""
  pageInfo: PaginationInfo!
}

type User {
  email: String!
  account: String!
  enabled: Boolean!
  firstName: String!
  lastName: String!
  salt: String
  hashedPassword: String
  passwordExpires: Date
  role: String!
  sso: String
  sso_sub: String
  locale: String!
  zoneInfo: String!
  avatar: String
  lastLoggedIn: Date!
  theme: String!
  _id: MongoID!
  updatedAt: Date
  createdAt: Date
}

enum SortFindByIdsUserInput {
  _ID_ASC
  _ID_DESC
  EMAIL_ASC
  EMAIL_DESC
}

""""""
input FilterFindOneUserInput {
  email: String
  account: String
  enabled: Boolean
  firstName: String
  lastName: String
  salt: String
  hashedPassword: String
  passwordExpires: Date
  role: String
  sso: String
  sso_sub: String
  locale: String
  zoneInfo: String
  avatar: String
  lastLoggedIn: Date
  theme: String
  _id: MongoID
  updatedAt: Date
  createdAt: Date

  """List of *indexed* fields that can be filtered via operators."""
  _operators: FilterFindOneUserOperatorsInput
  OR: [FilterFindOneUserInput!]
  AND: [FilterFindOneUserInput!]
}

"""For performance reason this type contains only *indexed* fields."""
input FilterFindOneUserOperatorsInput {
  email: FilterFindOneUserEmailOperatorsInput
  _id: FilterFindOneUser_idOperatorsInput
}

input FilterFindOneUserEmailOperatorsInput {
  gt: String
  gte: String
  lt: String
  lte: String
  ne: String
  in: [String]
  nin: [String]
  regex: RegExpAsString
  exists: Boolean
}

input FilterFindOneUser_idOperatorsInput {
  gt: MongoID
  gte: MongoID
  lt: MongoID
  lte: MongoID
  ne: MongoID
  in: [MongoID]
  nin: [MongoID]
  exists: Boolean
}

enum SortFindOneUserInput {
  _ID_ASC
  _ID_DESC
  EMAIL_ASC
  EMAIL_DESC
}

""""""
input FilterFindManyUserInput {
  email: String
  account: String
  enabled: Boolean
  firstName: String
  lastName: String
  salt: String
  hashedPassword: String
  passwordExpires: Date
  role: String
  sso: String
  sso_sub: String
  locale: String
  zoneInfo: String
  avatar: String
  lastLoggedIn: Date
  theme: String
  _id: MongoID
  updatedAt: Date
  createdAt: Date

  """List of *indexed* fields that can be filtered via operators."""
  _operators: FilterFindManyUserOperatorsInput
  OR: [FilterFindManyUserInput!]
  AND: [FilterFindManyUserInput!]
}

"""For performance reason this type contains only *indexed* fields."""
input FilterFindManyUserOperatorsInput {
  email: FilterFindManyUserEmailOperatorsInput
  _id: FilterFindManyUser_idOperatorsInput
}

input FilterFindManyUserEmailOperatorsInput {
  gt: String
  gte: String
  lt: String
  lte: String
  ne: String
  in: [String]
  nin: [String]
  regex: RegExpAsString
  exists: Boolean
}

input FilterFindManyUser_idOperatorsInput {
  gt: MongoID
  gte: MongoID
  lt: MongoID
  lte: MongoID
  ne: MongoID
  in: [MongoID]
  nin: [MongoID]
  exists: Boolean
}

enum SortFindManyUserInput {
  _ID_ASC
  _ID_DESC
  EMAIL_ASC
  EMAIL_DESC
}

""""""
input FilterCountUserInput {
  email: String
  account: String
  enabled: Boolean
  firstName: String
  lastName: String
  salt: String
  hashedPassword: String
  passwordExpires: Date
  role: String
  sso: String
  sso_sub: String
  locale: String
  zoneInfo: String
  avatar: String
  lastLoggedIn: Date
  theme: String
  _id: MongoID
  updatedAt: Date
  createdAt: Date

  """List of *indexed* fields that can be filtered via operators."""
  _operators: FilterCountUserOperatorsInput
  OR: [FilterCountUserInput!]
  AND: [FilterCountUserInput!]
}

"""For performance reason this type contains only *indexed* fields."""
input FilterCountUserOperatorsInput {
  email: FilterCountUserEmailOperatorsInput
  _id: FilterCountUser_idOperatorsInput
}

input FilterCountUserEmailOperatorsInput {
  gt: String
  gte: String
  lt: String
  lte: String
  ne: String
  in: [String]
  nin: [String]
  regex: RegExpAsString
  exists: Boolean
}

input FilterCountUser_idOperatorsInput {
  gt: MongoID
  gte: MongoID
  lt: MongoID
  lte: MongoID
  ne: MongoID
  in: [MongoID]
  nin: [MongoID]
  exists: Boolean
}

"""A connection to a list of items."""
type UserConnection {
  """Total object count."""
  count: Int!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """Information to aid in pagination."""
  edges: [UserEdge!]!
}

"""An edge in a connection."""
type UserEdge {
  """The item at the end of the edge"""
  node: User!

  """A cursor for use in pagination"""
  cursor: String!
}

enum SortConnectionUserEnum {
  _ID_DESC
  _ID_ASC
  EMAIL_DESC
  EMAIL_ASC
}

"""List of items with pagination."""
type UserPagination {
  """Total object count."""
  count: Int

  """Array of objects."""
  items: [User!]

  """Information to aid in pagination."""
  pageInfo: PaginationInfo!
}

type Team {
  name: String!
  description: String
  account: String!
  members: [String]
  tags: [String]
  _id: MongoID!
  updatedAt: Date
  createdAt: Date
}

enum SortFindByIdsTeamInput {
  _ID_ASC
  _ID_DESC
}

""""""
input FilterFindOneTeamInput {
  name: String
  description: String
  account: String
  members: [String]
  tags: [String]
  _id: MongoID
  updatedAt: Date
  createdAt: Date

  """List of *indexed* fields that can be filtered via operators."""
  _operators: FilterFindOneTeamOperatorsInput
  OR: [FilterFindOneTeamInput!]
  AND: [FilterFindOneTeamInput!]
}

"""For performance reason this type contains only *indexed* fields."""
input FilterFindOneTeamOperatorsInput {
  _id: FilterFindOneTeam_idOperatorsInput
}

input FilterFindOneTeam_idOperatorsInput {
  gt: MongoID
  gte: MongoID
  lt: MongoID
  lte: MongoID
  ne: MongoID
  in: [MongoID]
  nin: [MongoID]
  exists: Boolean
}

enum SortFindOneTeamInput {
  _ID_ASC
  _ID_DESC
}

""""""
input FilterFindManyTeamInput {
  name: String
  description: String
  account: String
  members: [String]
  tags: [String]
  _id: MongoID
  updatedAt: Date
  createdAt: Date

  """List of *indexed* fields that can be filtered via operators."""
  _operators: FilterFindManyTeamOperatorsInput
  OR: [FilterFindManyTeamInput!]
  AND: [FilterFindManyTeamInput!]
}

"""For performance reason this type contains only *indexed* fields."""
input FilterFindManyTeamOperatorsInput {
  _id: FilterFindManyTeam_idOperatorsInput
}

input FilterFindManyTeam_idOperatorsInput {
  gt: MongoID
  gte: MongoID
  lt: MongoID
  lte: MongoID
  ne: MongoID
  in: [MongoID]
  nin: [MongoID]
  exists: Boolean
}

enum SortFindManyTeamInput {
  _ID_ASC
  _ID_DESC
}

""""""
input FilterCountTeamInput {
  name: String
  description: String
  account: String
  members: [String]
  tags: [String]
  _id: MongoID
  updatedAt: Date
  createdAt: Date

  """List of *indexed* fields that can be filtered via operators."""
  _operators: FilterCountTeamOperatorsInput
  OR: [FilterCountTeamInput!]
  AND: [FilterCountTeamInput!]
}

"""For performance reason this type contains only *indexed* fields."""
input FilterCountTeamOperatorsInput {
  _id: FilterCountTeam_idOperatorsInput
}

input FilterCountTeam_idOperatorsInput {
  gt: MongoID
  gte: MongoID
  lt: MongoID
  lte: MongoID
  ne: MongoID
  in: [MongoID]
  nin: [MongoID]
  exists: Boolean
}

"""A connection to a list of items."""
type TeamConnection {
  """Total object count."""
  count: Int!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """Information to aid in pagination."""
  edges: [TeamEdge!]!
}

"""An edge in a connection."""
type TeamEdge {
  """The item at the end of the edge"""
  node: Team!

  """A cursor for use in pagination"""
  cursor: String!
}

enum SortConnectionTeamEnum {
  _ID_DESC
  _ID_ASC
}

"""List of items with pagination."""
type TeamPagination {
  """Total object count."""
  count: Int

  """Array of objects."""
  items: [Team!]

  """Information to aid in pagination."""
  pageInfo: PaginationInfo!
}

type ApiKey {
  account: String!
  key: String!
  name: String!
  role: String!
  enabled: Boolean!
  createdBy: String!
  modifiedBy: String!
  lastUsed: String
  lastUsedBy: String
  _id: MongoID!
  updatedAt: Date
  createdAt: Date
}

enum SortFindByIdsApiKeyInput {
  _ID_ASC
  _ID_DESC
}

""""""
input FilterFindOneApiKeyInput {
  account: String
  key: String
  name: String
  role: String
  enabled: Boolean
  createdBy: String
  modifiedBy: String
  lastUsed: String
  lastUsedBy: String
  _id: MongoID
  updatedAt: Date
  createdAt: Date

  """List of *indexed* fields that can be filtered via operators."""
  _operators: FilterFindOneApiKeyOperatorsInput
  OR: [FilterFindOneApiKeyInput!]
  AND: [FilterFindOneApiKeyInput!]
}

"""For performance reason this type contains only *indexed* fields."""
input FilterFindOneApiKeyOperatorsInput {
  _id: FilterFindOneApiKey_idOperatorsInput
}

input FilterFindOneApiKey_idOperatorsInput {
  gt: MongoID
  gte: MongoID
  lt: MongoID
  lte: MongoID
  ne: MongoID
  in: [MongoID]
  nin: [MongoID]
  exists: Boolean
}

enum SortFindOneApiKeyInput {
  _ID_ASC
  _ID_DESC
}

""""""
input FilterFindManyApiKeyInput {
  account: String
  key: String
  name: String
  role: String
  enabled: Boolean
  createdBy: String
  modifiedBy: String
  lastUsed: String
  lastUsedBy: String
  _id: MongoID
  updatedAt: Date
  createdAt: Date

  """List of *indexed* fields that can be filtered via operators."""
  _operators: FilterFindManyApiKeyOperatorsInput
  OR: [FilterFindManyApiKeyInput!]
  AND: [FilterFindManyApiKeyInput!]
}

"""For performance reason this type contains only *indexed* fields."""
input FilterFindManyApiKeyOperatorsInput {
  _id: FilterFindManyApiKey_idOperatorsInput
}

input FilterFindManyApiKey_idOperatorsInput {
  gt: MongoID
  gte: MongoID
  lt: MongoID
  lte: MongoID
  ne: MongoID
  in: [MongoID]
  nin: [MongoID]
  exists: Boolean
}

enum SortFindManyApiKeyInput {
  _ID_ASC
  _ID_DESC
}

""""""
input FilterCountApiKeyInput {
  account: String
  key: String
  name: String
  role: String
  enabled: Boolean
  createdBy: String
  modifiedBy: String
  lastUsed: String
  lastUsedBy: String
  _id: MongoID
  updatedAt: Date
  createdAt: Date

  """List of *indexed* fields that can be filtered via operators."""
  _operators: FilterCountApiKeyOperatorsInput
  OR: [FilterCountApiKeyInput!]
  AND: [FilterCountApiKeyInput!]
}

"""For performance reason this type contains only *indexed* fields."""
input FilterCountApiKeyOperatorsInput {
  _id: FilterCountApiKey_idOperatorsInput
}

input FilterCountApiKey_idOperatorsInput {
  gt: MongoID
  gte: MongoID
  lt: MongoID
  lte: MongoID
  ne: MongoID
  in: [MongoID]
  nin: [MongoID]
  exists: Boolean
}

"""A connection to a list of items."""
type ApiKeyConnection {
  """Total object count."""
  count: Int!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """Information to aid in pagination."""
  edges: [ApiKeyEdge!]!
}

"""An edge in a connection."""
type ApiKeyEdge {
  """The item at the end of the edge"""
  node: ApiKey!

  """A cursor for use in pagination"""
  cursor: String!
}

enum SortConnectionApiKeyEnum {
  _ID_DESC
  _ID_ASC
}

"""List of items with pagination."""
type ApiKeyPagination {
  """Total object count."""
  count: Int

  """Array of objects."""
  items: [ApiKey!]

  """Information to aid in pagination."""
  pageInfo: PaginationInfo!
}

type Mutation {
  """
  Create one document with mongoose defaults, setters, hooks and validation
  """
  serviceCreateOne(record: CreateOneServiceInput!): CreateOneServicePayload

  """
  Creates Many documents with mongoose defaults, setters, hooks and validation
  """
  serviceCreateMany(records: [CreateManyServiceInput!]!): CreateManyServicePayload

  """
  Update one document: 1) Retrieve one document by findById. 2) Apply updates to mongoose document. 3) Mongoose applies defaults, setters, hooks and validation. 4) And save it.
  """
  serviceUpdateById(_id: MongoID!, record: UpdateByIdServiceInput!): UpdateByIdServicePayload

  """
  Update one document: 1) Retrieve one document via findOne. 2) Apply updates to mongoose document. 3) Mongoose applies defaults, setters, hooks and validation. 4) And save it.
  """
  serviceUpdateOne(
    record: UpdateOneServiceInput!

    """Filter by fields"""
    filter: FilterUpdateOneServiceInput
    sort: SortUpdateOneServiceInput
    skip: Int
  ): UpdateOneServicePayload

  """
  Update many documents without returning them: Use Query.update mongoose method. Do not apply mongoose defaults, setters, hooks and validation. 
  """
  serviceUpdateMany(
    record: UpdateManyServiceInput!

    """Filter by fields"""
    filter: FilterUpdateManyServiceInput
    sort: SortUpdateManyServiceInput
    skip: Int
    limit: Int = 100
  ): UpdateManyServicePayload

  """
  Remove one document: 1) Retrieve one document and remove with hooks via findByIdAndRemove. 2) Return removed document.
  """
  serviceRemoveById(_id: MongoID!): RemoveByIdServicePayload

  """
  Remove one document: 1) Remove with hooks via findOneAndRemove. 2) Return removed document.
  """
  serviceRemoveOne(
    """Filter by fields"""
    filter: FilterRemoveOneServiceInput
    sort: SortRemoveOneServiceInput
  ): RemoveOneServicePayload

  """
  Remove many documents without returning them: Use Query.remove mongoose method. Do not apply mongoose defaults, setters, hooks and validation. 
  """
  serviceRemoveMany(
    """Filter by fields"""
    filter: FilterRemoveManyServiceInput!
    limit: Int = 100
  ): RemoveManyServicePayload

  """
  Create one document with mongoose defaults, setters, hooks and validation
  """
  logCreateOne(record: CreateOneLogInput!): CreateOneLogPayload

  """
  Creates Many documents with mongoose defaults, setters, hooks and validation
  """
  logCreateMany(records: [CreateManyLogInput!]!): CreateManyLogPayload

  """
  Update one document: 1) Retrieve one document by findById. 2) Apply updates to mongoose document. 3) Mongoose applies defaults, setters, hooks and validation. 4) And save it.
  """
  logUpdateById(_id: MongoID!, record: UpdateByIdLogInput!): UpdateByIdLogPayload

  """
  Update one document: 1) Retrieve one document via findOne. 2) Apply updates to mongoose document. 3) Mongoose applies defaults, setters, hooks and validation. 4) And save it.
  """
  logUpdateOne(
    record: UpdateOneLogInput!

    """Filter by fields"""
    filter: FilterUpdateOneLogInput
    sort: SortUpdateOneLogInput
    skip: Int
  ): UpdateOneLogPayload

  """
  Update many documents without returning them: Use Query.update mongoose method. Do not apply mongoose defaults, setters, hooks and validation. 
  """
  logUpdateMany(
    record: UpdateManyLogInput!

    """Filter by fields"""
    filter: FilterUpdateManyLogInput
    sort: SortUpdateManyLogInput
    skip: Int
    limit: Int = 100
  ): UpdateManyLogPayload

  """
  Remove one document: 1) Retrieve one document and remove with hooks via findByIdAndRemove. 2) Return removed document.
  """
  logRemoveById(_id: MongoID!): RemoveByIdLogPayload

  """
  Remove one document: 1) Remove with hooks via findOneAndRemove. 2) Return removed document.
  """
  logRemoveOne(
    """Filter by fields"""
    filter: FilterRemoveOneLogInput
    sort: SortRemoveOneLogInput
  ): RemoveOneLogPayload

  """
  Remove many documents without returning them: Use Query.remove mongoose method. Do not apply mongoose defaults, setters, hooks and validation. 
  """
  logRemoveMany(
    """Filter by fields"""
    filter: FilterRemoveManyLogInput!
    limit: Int = 100
  ): RemoveManyLogPayload

  """
  Create one document with mongoose defaults, setters, hooks and validation
  """
  accountCreateOne(record: CreateOneAccountInput!): CreateOneAccountPayload

  """
  Creates Many documents with mongoose defaults, setters, hooks and validation
  """
  accountCreateMany(records: [CreateManyAccountInput!]!): CreateManyAccountPayload

  """
  Update one document: 1) Retrieve one document by findById. 2) Apply updates to mongoose document. 3) Mongoose applies defaults, setters, hooks and validation. 4) And save it.
  """
  accountUpdateById(_id: MongoID!, record: UpdateByIdAccountInput!): UpdateByIdAccountPayload

  """
  Update one document: 1) Retrieve one document via findOne. 2) Apply updates to mongoose document. 3) Mongoose applies defaults, setters, hooks and validation. 4) And save it.
  """
  accountUpdateOne(
    record: UpdateOneAccountInput!

    """Filter by fields"""
    filter: FilterUpdateOneAccountInput
    sort: SortUpdateOneAccountInput
    skip: Int
  ): UpdateOneAccountPayload

  """
  Update many documents without returning them: Use Query.update mongoose method. Do not apply mongoose defaults, setters, hooks and validation. 
  """
  accountUpdateMany(
    record: UpdateManyAccountInput!

    """Filter by fields"""
    filter: FilterUpdateManyAccountInput
    sort: SortUpdateManyAccountInput
    skip: Int
    limit: Int = 100
  ): UpdateManyAccountPayload

  """
  Remove one document: 1) Retrieve one document and remove with hooks via findByIdAndRemove. 2) Return removed document.
  """
  accountRemoveById(_id: MongoID!): RemoveByIdAccountPayload

  """
  Remove one document: 1) Remove with hooks via findOneAndRemove. 2) Return removed document.
  """
  accountRemoveOne(
    """Filter by fields"""
    filter: FilterRemoveOneAccountInput
    sort: SortRemoveOneAccountInput
  ): RemoveOneAccountPayload

  """
  Remove many documents without returning them: Use Query.remove mongoose method. Do not apply mongoose defaults, setters, hooks and validation. 
  """
  accountRemoveMany(
    """Filter by fields"""
    filter: FilterRemoveManyAccountInput!
    limit: Int = 100
  ): RemoveManyAccountPayload

  """
  Create one document with mongoose defaults, setters, hooks and validation
  """
  userCreateOne(record: CreateOneUserInput!): CreateOneUserPayload

  """
  Creates Many documents with mongoose defaults, setters, hooks and validation
  """
  userCreateMany(records: [CreateManyUserInput!]!): CreateManyUserPayload

  """
  Update one document: 1) Retrieve one document by findById. 2) Apply updates to mongoose document. 3) Mongoose applies defaults, setters, hooks and validation. 4) And save it.
  """
  userUpdateById(_id: MongoID!, record: UpdateByIdUserInput!): UpdateByIdUserPayload

  """
  Update one document: 1) Retrieve one document via findOne. 2) Apply updates to mongoose document. 3) Mongoose applies defaults, setters, hooks and validation. 4) And save it.
  """
  userUpdateOne(
    record: UpdateOneUserInput!

    """Filter by fields"""
    filter: FilterUpdateOneUserInput
    sort: SortUpdateOneUserInput
    skip: Int
  ): UpdateOneUserPayload

  """
  Update many documents without returning them: Use Query.update mongoose method. Do not apply mongoose defaults, setters, hooks and validation. 
  """
  userUpdateMany(
    record: UpdateManyUserInput!

    """Filter by fields"""
    filter: FilterUpdateManyUserInput
    sort: SortUpdateManyUserInput
    skip: Int
    limit: Int = 100
  ): UpdateManyUserPayload

  """
  Remove one document: 1) Retrieve one document and remove with hooks via findByIdAndRemove. 2) Return removed document.
  """
  userRemoveById(_id: MongoID!): RemoveByIdUserPayload

  """
  Remove one document: 1) Remove with hooks via findOneAndRemove. 2) Return removed document.
  """
  userRemoveOne(
    """Filter by fields"""
    filter: FilterRemoveOneUserInput
    sort: SortRemoveOneUserInput
  ): RemoveOneUserPayload

  """
  Remove many documents without returning them: Use Query.remove mongoose method. Do not apply mongoose defaults, setters, hooks and validation. 
  """
  userRemoveMany(
    """Filter by fields"""
    filter: FilterRemoveManyUserInput!
    limit: Int = 100
  ): RemoveManyUserPayload

  """
  Create one document with mongoose defaults, setters, hooks and validation
  """
  teamCreateOne(record: CreateOneTeamInput!): CreateOneTeamPayload

  """
  Creates Many documents with mongoose defaults, setters, hooks and validation
  """
  teamCreateMany(records: [CreateManyTeamInput!]!): CreateManyTeamPayload

  """
  Update one document: 1) Retrieve one document by findById. 2) Apply updates to mongoose document. 3) Mongoose applies defaults, setters, hooks and validation. 4) And save it.
  """
  teamUpdateById(_id: MongoID!, record: UpdateByIdTeamInput!): UpdateByIdTeamPayload

  """
  Update one document: 1) Retrieve one document via findOne. 2) Apply updates to mongoose document. 3) Mongoose applies defaults, setters, hooks and validation. 4) And save it.
  """
  teamUpdateOne(
    record: UpdateOneTeamInput!

    """Filter by fields"""
    filter: FilterUpdateOneTeamInput
    sort: SortUpdateOneTeamInput
    skip: Int
  ): UpdateOneTeamPayload

  """
  Update many documents without returning them: Use Query.update mongoose method. Do not apply mongoose defaults, setters, hooks and validation. 
  """
  teamUpdateMany(
    record: UpdateManyTeamInput!

    """Filter by fields"""
    filter: FilterUpdateManyTeamInput
    sort: SortUpdateManyTeamInput
    skip: Int
    limit: Int = 100
  ): UpdateManyTeamPayload

  """
  Remove one document: 1) Retrieve one document and remove with hooks via findByIdAndRemove. 2) Return removed document.
  """
  teamRemoveById(_id: MongoID!): RemoveByIdTeamPayload

  """
  Remove one document: 1) Remove with hooks via findOneAndRemove. 2) Return removed document.
  """
  teamRemoveOne(
    """Filter by fields"""
    filter: FilterRemoveOneTeamInput
    sort: SortRemoveOneTeamInput
  ): RemoveOneTeamPayload

  """
  Remove many documents without returning them: Use Query.remove mongoose method. Do not apply mongoose defaults, setters, hooks and validation. 
  """
  teamRemoveMany(
    """Filter by fields"""
    filter: FilterRemoveManyTeamInput!
    limit: Int = 100
  ): RemoveManyTeamPayload

  """
  Create one document with mongoose defaults, setters, hooks and validation
  """
  apiKeyCreateOne(record: CreateOneApiKeyInput!): CreateOneApiKeyPayload

  """
  Creates Many documents with mongoose defaults, setters, hooks and validation
  """
  apiKeyCreateMany(records: [CreateManyApiKeyInput!]!): CreateManyApiKeyPayload

  """
  Update one document: 1) Retrieve one document by findById. 2) Apply updates to mongoose document. 3) Mongoose applies defaults, setters, hooks and validation. 4) And save it.
  """
  apiKeyUpdateById(_id: MongoID!, record: UpdateByIdApiKeyInput!): UpdateByIdApiKeyPayload

  """
  Update one document: 1) Retrieve one document via findOne. 2) Apply updates to mongoose document. 3) Mongoose applies defaults, setters, hooks and validation. 4) And save it.
  """
  apiKeyUpdateOne(
    record: UpdateOneApiKeyInput!

    """Filter by fields"""
    filter: FilterUpdateOneApiKeyInput
    sort: SortUpdateOneApiKeyInput
    skip: Int
  ): UpdateOneApiKeyPayload

  """
  Update many documents without returning them: Use Query.update mongoose method. Do not apply mongoose defaults, setters, hooks and validation. 
  """
  apiKeyUpdateMany(
    record: UpdateManyApiKeyInput!

    """Filter by fields"""
    filter: FilterUpdateManyApiKeyInput
    sort: SortUpdateManyApiKeyInput
    skip: Int
    limit: Int = 100
  ): UpdateManyApiKeyPayload

  """
  Remove one document: 1) Retrieve one document and remove with hooks via findByIdAndRemove. 2) Return removed document.
  """
  apiKeyRemoveById(_id: MongoID!): RemoveByIdApiKeyPayload

  """
  Remove one document: 1) Remove with hooks via findOneAndRemove. 2) Return removed document.
  """
  apiKeyRemoveOne(
    """Filter by fields"""
    filter: FilterRemoveOneApiKeyInput
    sort: SortRemoveOneApiKeyInput
  ): RemoveOneApiKeyPayload

  """
  Remove many documents without returning them: Use Query.remove mongoose method. Do not apply mongoose defaults, setters, hooks and validation. 
  """
  apiKeyRemoveMany(
    """Filter by fields"""
    filter: FilterRemoveManyApiKeyInput!
    limit: Int = 100
  ): RemoveManyApiKeyPayload
}

type CreateOneServicePayload {
  """Document ID"""
  recordId: MongoID

  """Created document"""
  record: Service

  """
  Error that may occur during operation. If you request this field in GraphQL query, you will receive typed error in payload; otherwise error will be provided in root `errors` field of GraphQL response.
  """
  error: ErrorInterface
}

interface ErrorInterface {
  """Generic error message"""
  message: String
}

""""""
input CreateOneServiceInput {
  account: String!
  service: String!
  environments: [ServiceEnvironmentsInput]
  team: String
  tags: [String]
  updatedAt: Date
  createdAt: Date
}

input ServiceEnvironmentsInput {
  name: String
  status: String
  version: String
  timestamp: Date
  custom: JSON
  _id: MongoID
}

type CreateManyServicePayload {
  """Documents IDs"""
  recordIds: [MongoID!]!

  """Created documents"""
  records: [Service!]

  """Number of created documents"""
  createdCount: Int!

  """
  Error that may occur during operation. If you request this field in GraphQL query, you will receive typed error in payload; otherwise error will be provided in root `errors` field of GraphQL response.
  """
  error: ErrorInterface
}

""""""
input CreateManyServiceInput {
  account: String!
  service: String!
  environments: [ServiceEnvironmentsInput]
  team: String
  tags: [String]
  updatedAt: Date
  createdAt: Date
}

type UpdateByIdServicePayload {
  """Document ID"""
  recordId: MongoID

  """Updated document"""
  record: Service

  """
  Error that may occur during operation. If you request this field in GraphQL query, you will receive typed error in payload; otherwise error will be provided in root `errors` field of GraphQL response.
  """
  error: ErrorInterface
}

""""""
input UpdateByIdServiceInput {
  account: String
  service: String
  environments: [UpdateByIdServiceEnvironmentsInput]
  team: String
  tags: [String]
  updatedAt: Date
  createdAt: Date
}

""""""
input UpdateByIdServiceEnvironmentsInput {
  name: String
  status: String
  version: String
  timestamp: Date
  custom: JSON
  _id: MongoID
}

type UpdateOneServicePayload {
  """Document ID"""
  recordId: MongoID

  """Updated document"""
  record: Service

  """
  Error that may occur during operation. If you request this field in GraphQL query, you will receive typed error in payload; otherwise error will be provided in root `errors` field of GraphQL response.
  """
  error: ErrorInterface
}

""""""
input UpdateOneServiceInput {
  account: String
  service: String
  environments: [UpdateOneServiceEnvironmentsInput]
  team: String
  tags: [String]
  updatedAt: Date
  createdAt: Date
}

""""""
input UpdateOneServiceEnvironmentsInput {
  name: String
  status: String
  version: String
  timestamp: Date
  custom: JSON
  _id: MongoID
}

""""""
input FilterUpdateOneServiceInput {
  account: String
  service: String
  environments: [FilterUpdateOneServiceEnvironmentsInput]
  team: String
  tags: [String]
  _id: MongoID
  updatedAt: Date
  createdAt: Date

  """List of *indexed* fields that can be filtered via operators."""
  _operators: FilterUpdateOneServiceOperatorsInput
  OR: [FilterUpdateOneServiceInput!]
  AND: [FilterUpdateOneServiceInput!]
}

""""""
input FilterUpdateOneServiceEnvironmentsInput {
  name: String
  status: String
  version: String
  timestamp: Date
  custom: JSON
  _id: MongoID
}

"""For performance reason this type contains only *indexed* fields."""
input FilterUpdateOneServiceOperatorsInput {
  _id: FilterUpdateOneService_idOperatorsInput
}

input FilterUpdateOneService_idOperatorsInput {
  gt: MongoID
  gte: MongoID
  lt: MongoID
  lte: MongoID
  ne: MongoID
  in: [MongoID]
  nin: [MongoID]
  exists: Boolean
}

enum SortUpdateOneServiceInput {
  _ID_ASC
  _ID_DESC
}

type UpdateManyServicePayload {
  """Affected documents number"""
  numAffected: Int

  """
  Error that may occur during operation. If you request this field in GraphQL query, you will receive typed error in payload; otherwise error will be provided in root `errors` field of GraphQL response.
  """
  error: ErrorInterface
}

""""""
input UpdateManyServiceInput {
  account: String
  service: String
  environments: [UpdateManyServiceEnvironmentsInput]
  team: String
  tags: [String]
  updatedAt: Date
  createdAt: Date
}

""""""
input UpdateManyServiceEnvironmentsInput {
  name: String
  status: String
  version: String
  timestamp: Date
  custom: JSON
  _id: MongoID
}

""""""
input FilterUpdateManyServiceInput {
  account: String
  service: String
  environments: [FilterUpdateManyServiceEnvironmentsInput]
  team: String
  tags: [String]
  _id: MongoID
  updatedAt: Date
  createdAt: Date

  """List of *indexed* fields that can be filtered via operators."""
  _operators: FilterUpdateManyServiceOperatorsInput
  OR: [FilterUpdateManyServiceInput!]
  AND: [FilterUpdateManyServiceInput!]
}

""""""
input FilterUpdateManyServiceEnvironmentsInput {
  name: String
  status: String
  version: String
  timestamp: Date
  custom: JSON
  _id: MongoID
}

"""For performance reason this type contains only *indexed* fields."""
input FilterUpdateManyServiceOperatorsInput {
  _id: FilterUpdateManyService_idOperatorsInput
}

input FilterUpdateManyService_idOperatorsInput {
  gt: MongoID
  gte: MongoID
  lt: MongoID
  lte: MongoID
  ne: MongoID
  in: [MongoID]
  nin: [MongoID]
  exists: Boolean
}

enum SortUpdateManyServiceInput {
  _ID_ASC
  _ID_DESC
}

type RemoveByIdServicePayload {
  """Document ID"""
  recordId: MongoID

  """Removed document"""
  record: Service

  """
  Error that may occur during operation. If you request this field in GraphQL query, you will receive typed error in payload; otherwise error will be provided in root `errors` field of GraphQL response.
  """
  error: ErrorInterface
}

type RemoveOneServicePayload {
  """Document ID"""
  recordId: MongoID

  """Removed document"""
  record: Service

  """
  Error that may occur during operation. If you request this field in GraphQL query, you will receive typed error in payload; otherwise error will be provided in root `errors` field of GraphQL response.
  """
  error: ErrorInterface
}

""""""
input FilterRemoveOneServiceInput {
  account: String
  service: String
  environments: [FilterRemoveOneServiceEnvironmentsInput]
  team: String
  tags: [String]
  _id: MongoID
  updatedAt: Date
  createdAt: Date

  """List of *indexed* fields that can be filtered via operators."""
  _operators: FilterRemoveOneServiceOperatorsInput
  OR: [FilterRemoveOneServiceInput!]
  AND: [FilterRemoveOneServiceInput!]
}

""""""
input FilterRemoveOneServiceEnvironmentsInput {
  name: String
  status: String
  version: String
  timestamp: Date
  custom: JSON
  _id: MongoID
}

"""For performance reason this type contains only *indexed* fields."""
input FilterRemoveOneServiceOperatorsInput {
  _id: FilterRemoveOneService_idOperatorsInput
}

input FilterRemoveOneService_idOperatorsInput {
  gt: MongoID
  gte: MongoID
  lt: MongoID
  lte: MongoID
  ne: MongoID
  in: [MongoID]
  nin: [MongoID]
  exists: Boolean
}

enum SortRemoveOneServiceInput {
  _ID_ASC
  _ID_DESC
}

type RemoveManyServicePayload {
  """Affected documents number"""
  numAffected: Int

  """
  Error that may occur during operation. If you request this field in GraphQL query, you will receive typed error in payload; otherwise error will be provided in root `errors` field of GraphQL response.
  """
  error: ErrorInterface
}

""""""
input FilterRemoveManyServiceInput {
  account: String
  service: String
  environments: [FilterRemoveManyServiceEnvironmentsInput]
  team: String
  tags: [String]
  _id: MongoID
  updatedAt: Date
  createdAt: Date

  """List of *indexed* fields that can be filtered via operators."""
  _operators: FilterRemoveManyServiceOperatorsInput
  OR: [FilterRemoveManyServiceInput!]
  AND: [FilterRemoveManyServiceInput!]
}

""""""
input FilterRemoveManyServiceEnvironmentsInput {
  name: String
  status: String
  version: String
  timestamp: Date
  custom: JSON
  _id: MongoID
}

"""For performance reason this type contains only *indexed* fields."""
input FilterRemoveManyServiceOperatorsInput {
  _id: FilterRemoveManyService_idOperatorsInput
}

input FilterRemoveManyService_idOperatorsInput {
  gt: MongoID
  gte: MongoID
  lt: MongoID
  lte: MongoID
  ne: MongoID
  in: [MongoID]
  nin: [MongoID]
  exists: Boolean
}

type CreateOneLogPayload {
  """Document ID"""
  recordId: MongoID

  """Created document"""
  record: Log

  """
  Error that may occur during operation. If you request this field in GraphQL query, you will receive typed error in payload; otherwise error will be provided in root `errors` field of GraphQL response.
  """
  error: ErrorInterface
}

""""""
input CreateOneLogInput {
  account: String!
  service: String!
  environment: String!
  status: String!
  version: String!
  updatedAt: Date
  createdAt: Date
}

type CreateManyLogPayload {
  """Documents IDs"""
  recordIds: [MongoID!]!

  """Created documents"""
  records: [Log!]

  """Number of created documents"""
  createdCount: Int!

  """
  Error that may occur during operation. If you request this field in GraphQL query, you will receive typed error in payload; otherwise error will be provided in root `errors` field of GraphQL response.
  """
  error: ErrorInterface
}

""""""
input CreateManyLogInput {
  account: String!
  service: String!
  environment: String!
  status: String!
  version: String!
  updatedAt: Date
  createdAt: Date
}

type UpdateByIdLogPayload {
  """Document ID"""
  recordId: MongoID

  """Updated document"""
  record: Log

  """
  Error that may occur during operation. If you request this field in GraphQL query, you will receive typed error in payload; otherwise error will be provided in root `errors` field of GraphQL response.
  """
  error: ErrorInterface
}

""""""
input UpdateByIdLogInput {
  account: String
  service: String
  environment: String
  status: String
  version: String
  updatedAt: Date
  createdAt: Date
}

type UpdateOneLogPayload {
  """Document ID"""
  recordId: MongoID

  """Updated document"""
  record: Log

  """
  Error that may occur during operation. If you request this field in GraphQL query, you will receive typed error in payload; otherwise error will be provided in root `errors` field of GraphQL response.
  """
  error: ErrorInterface
}

""""""
input UpdateOneLogInput {
  account: String
  service: String
  environment: String
  status: String
  version: String
  updatedAt: Date
  createdAt: Date
}

""""""
input FilterUpdateOneLogInput {
  account: String
  service: String
  environment: String
  status: String
  version: String
  _id: MongoID
  updatedAt: Date
  createdAt: Date

  """List of *indexed* fields that can be filtered via operators."""
  _operators: FilterUpdateOneLogOperatorsInput
  OR: [FilterUpdateOneLogInput!]
  AND: [FilterUpdateOneLogInput!]
}

"""For performance reason this type contains only *indexed* fields."""
input FilterUpdateOneLogOperatorsInput {
  _id: FilterUpdateOneLog_idOperatorsInput
  createdAt: FilterUpdateOneLogCreatedAtOperatorsInput
}

input FilterUpdateOneLog_idOperatorsInput {
  gt: MongoID
  gte: MongoID
  lt: MongoID
  lte: MongoID
  ne: MongoID
  in: [MongoID]
  nin: [MongoID]
  exists: Boolean
}

input FilterUpdateOneLogCreatedAtOperatorsInput {
  gt: Date
  gte: Date
  lt: Date
  lte: Date
  ne: Date
  in: [Date]
  nin: [Date]
  exists: Boolean
}

enum SortUpdateOneLogInput {
  _ID_ASC
  _ID_DESC
  CREATEDAT_ASC
  CREATEDAT_DESC
  CREATEDAT__UPDATEDAT_ASC
  CREATEDAT__UPDATEDAT_DESC
}

type UpdateManyLogPayload {
  """Affected documents number"""
  numAffected: Int

  """
  Error that may occur during operation. If you request this field in GraphQL query, you will receive typed error in payload; otherwise error will be provided in root `errors` field of GraphQL response.
  """
  error: ErrorInterface
}

""""""
input UpdateManyLogInput {
  account: String
  service: String
  environment: String
  status: String
  version: String
  updatedAt: Date
  createdAt: Date
}

""""""
input FilterUpdateManyLogInput {
  account: String
  service: String
  environment: String
  status: String
  version: String
  _id: MongoID
  updatedAt: Date
  createdAt: Date

  """List of *indexed* fields that can be filtered via operators."""
  _operators: FilterUpdateManyLogOperatorsInput
  OR: [FilterUpdateManyLogInput!]
  AND: [FilterUpdateManyLogInput!]
}

"""For performance reason this type contains only *indexed* fields."""
input FilterUpdateManyLogOperatorsInput {
  _id: FilterUpdateManyLog_idOperatorsInput
  createdAt: FilterUpdateManyLogCreatedAtOperatorsInput
}

input FilterUpdateManyLog_idOperatorsInput {
  gt: MongoID
  gte: MongoID
  lt: MongoID
  lte: MongoID
  ne: MongoID
  in: [MongoID]
  nin: [MongoID]
  exists: Boolean
}

input FilterUpdateManyLogCreatedAtOperatorsInput {
  gt: Date
  gte: Date
  lt: Date
  lte: Date
  ne: Date
  in: [Date]
  nin: [Date]
  exists: Boolean
}

enum SortUpdateManyLogInput {
  _ID_ASC
  _ID_DESC
  CREATEDAT_ASC
  CREATEDAT_DESC
  CREATEDAT__UPDATEDAT_ASC
  CREATEDAT__UPDATEDAT_DESC
}

type RemoveByIdLogPayload {
  """Document ID"""
  recordId: MongoID

  """Removed document"""
  record: Log

  """
  Error that may occur during operation. If you request this field in GraphQL query, you will receive typed error in payload; otherwise error will be provided in root `errors` field of GraphQL response.
  """
  error: ErrorInterface
}

type RemoveOneLogPayload {
  """Document ID"""
  recordId: MongoID

  """Removed document"""
  record: Log

  """
  Error that may occur during operation. If you request this field in GraphQL query, you will receive typed error in payload; otherwise error will be provided in root `errors` field of GraphQL response.
  """
  error: ErrorInterface
}

""""""
input FilterRemoveOneLogInput {
  account: String
  service: String
  environment: String
  status: String
  version: String
  _id: MongoID
  updatedAt: Date
  createdAt: Date

  """List of *indexed* fields that can be filtered via operators."""
  _operators: FilterRemoveOneLogOperatorsInput
  OR: [FilterRemoveOneLogInput!]
  AND: [FilterRemoveOneLogInput!]
}

"""For performance reason this type contains only *indexed* fields."""
input FilterRemoveOneLogOperatorsInput {
  _id: FilterRemoveOneLog_idOperatorsInput
  createdAt: FilterRemoveOneLogCreatedAtOperatorsInput
}

input FilterRemoveOneLog_idOperatorsInput {
  gt: MongoID
  gte: MongoID
  lt: MongoID
  lte: MongoID
  ne: MongoID
  in: [MongoID]
  nin: [MongoID]
  exists: Boolean
}

input FilterRemoveOneLogCreatedAtOperatorsInput {
  gt: Date
  gte: Date
  lt: Date
  lte: Date
  ne: Date
  in: [Date]
  nin: [Date]
  exists: Boolean
}

enum SortRemoveOneLogInput {
  _ID_ASC
  _ID_DESC
  CREATEDAT_ASC
  CREATEDAT_DESC
  CREATEDAT__UPDATEDAT_ASC
  CREATEDAT__UPDATEDAT_DESC
}

type RemoveManyLogPayload {
  """Affected documents number"""
  numAffected: Int

  """
  Error that may occur during operation. If you request this field in GraphQL query, you will receive typed error in payload; otherwise error will be provided in root `errors` field of GraphQL response.
  """
  error: ErrorInterface
}

""""""
input FilterRemoveManyLogInput {
  account: String
  service: String
  environment: String
  status: String
  version: String
  _id: MongoID
  updatedAt: Date
  createdAt: Date

  """List of *indexed* fields that can be filtered via operators."""
  _operators: FilterRemoveManyLogOperatorsInput
  OR: [FilterRemoveManyLogInput!]
  AND: [FilterRemoveManyLogInput!]
}

"""For performance reason this type contains only *indexed* fields."""
input FilterRemoveManyLogOperatorsInput {
  _id: FilterRemoveManyLog_idOperatorsInput
  createdAt: FilterRemoveManyLogCreatedAtOperatorsInput
}

input FilterRemoveManyLog_idOperatorsInput {
  gt: MongoID
  gte: MongoID
  lt: MongoID
  lte: MongoID
  ne: MongoID
  in: [MongoID]
  nin: [MongoID]
  exists: Boolean
}

input FilterRemoveManyLogCreatedAtOperatorsInput {
  gt: Date
  gte: Date
  lt: Date
  lte: Date
  ne: Date
  in: [Date]
  nin: [Date]
  exists: Boolean
}

type CreateOneAccountPayload {
  """Document ID"""
  recordId: MongoID

  """Created document"""
  record: Account

  """
  Error that may occur during operation. If you request this field in GraphQL query, you will receive typed error in payload; otherwise error will be provided in root `errors` field of GraphQL response.
  """
  error: ErrorInterface
}

""""""
input CreateOneAccountInput {
  name: String!
  environments: [String]
  passwordPolicy: AccountPasswordPolicyInput!
  auth: String!
  updatedAt: Date
  createdAt: Date
}

input AccountPasswordPolicyInput {
  length: Float
  lowercase: Float
  uppercase: Float
  number: Float
  special: Float
  _id: MongoID
}

type CreateManyAccountPayload {
  """Documents IDs"""
  recordIds: [MongoID!]!

  """Created documents"""
  records: [Account!]

  """Number of created documents"""
  createdCount: Int!

  """
  Error that may occur during operation. If you request this field in GraphQL query, you will receive typed error in payload; otherwise error will be provided in root `errors` field of GraphQL response.
  """
  error: ErrorInterface
}

""""""
input CreateManyAccountInput {
  name: String!
  environments: [String]
  passwordPolicy: AccountPasswordPolicyInput!
  auth: String!
  updatedAt: Date
  createdAt: Date
}

type UpdateByIdAccountPayload {
  """Document ID"""
  recordId: MongoID

  """Updated document"""
  record: Account

  """
  Error that may occur during operation. If you request this field in GraphQL query, you will receive typed error in payload; otherwise error will be provided in root `errors` field of GraphQL response.
  """
  error: ErrorInterface
}

""""""
input UpdateByIdAccountInput {
  name: String
  environments: [String]
  passwordPolicy: UpdateByIdAccountPasswordPolicyInput
  auth: String
  updatedAt: Date
  createdAt: Date
}

""""""
input UpdateByIdAccountPasswordPolicyInput {
  length: Float
  lowercase: Float
  uppercase: Float
  number: Float
  special: Float
  _id: MongoID
}

type UpdateOneAccountPayload {
  """Document ID"""
  recordId: MongoID

  """Updated document"""
  record: Account

  """
  Error that may occur during operation. If you request this field in GraphQL query, you will receive typed error in payload; otherwise error will be provided in root `errors` field of GraphQL response.
  """
  error: ErrorInterface
}

""""""
input UpdateOneAccountInput {
  name: String
  environments: [String]
  passwordPolicy: UpdateOneAccountPasswordPolicyInput
  auth: String
  updatedAt: Date
  createdAt: Date
}

""""""
input UpdateOneAccountPasswordPolicyInput {
  length: Float
  lowercase: Float
  uppercase: Float
  number: Float
  special: Float
  _id: MongoID
}

""""""
input FilterUpdateOneAccountInput {
  name: String
  environments: [String]
  passwordPolicy: FilterUpdateOneAccountPasswordPolicyInput
  auth: String
  _id: MongoID
  updatedAt: Date
  createdAt: Date

  """List of *indexed* fields that can be filtered via operators."""
  _operators: FilterUpdateOneAccountOperatorsInput
  OR: [FilterUpdateOneAccountInput!]
  AND: [FilterUpdateOneAccountInput!]
}

""""""
input FilterUpdateOneAccountPasswordPolicyInput {
  length: Float
  lowercase: Float
  uppercase: Float
  number: Float
  special: Float
  _id: MongoID
}

"""For performance reason this type contains only *indexed* fields."""
input FilterUpdateOneAccountOperatorsInput {
  name: FilterUpdateOneAccountNameOperatorsInput
  _id: FilterUpdateOneAccount_idOperatorsInput
}

input FilterUpdateOneAccountNameOperatorsInput {
  gt: String
  gte: String
  lt: String
  lte: String
  ne: String
  in: [String]
  nin: [String]
  regex: RegExpAsString
  exists: Boolean
}

input FilterUpdateOneAccount_idOperatorsInput {
  gt: MongoID
  gte: MongoID
  lt: MongoID
  lte: MongoID
  ne: MongoID
  in: [MongoID]
  nin: [MongoID]
  exists: Boolean
}

enum SortUpdateOneAccountInput {
  _ID_ASC
  _ID_DESC
  NAME_ASC
  NAME_DESC
}

type UpdateManyAccountPayload {
  """Affected documents number"""
  numAffected: Int

  """
  Error that may occur during operation. If you request this field in GraphQL query, you will receive typed error in payload; otherwise error will be provided in root `errors` field of GraphQL response.
  """
  error: ErrorInterface
}

""""""
input UpdateManyAccountInput {
  name: String
  environments: [String]
  passwordPolicy: UpdateManyAccountPasswordPolicyInput
  auth: String
  updatedAt: Date
  createdAt: Date
}

""""""
input UpdateManyAccountPasswordPolicyInput {
  length: Float
  lowercase: Float
  uppercase: Float
  number: Float
  special: Float
  _id: MongoID
}

""""""
input FilterUpdateManyAccountInput {
  name: String
  environments: [String]
  passwordPolicy: FilterUpdateManyAccountPasswordPolicyInput
  auth: String
  _id: MongoID
  updatedAt: Date
  createdAt: Date

  """List of *indexed* fields that can be filtered via operators."""
  _operators: FilterUpdateManyAccountOperatorsInput
  OR: [FilterUpdateManyAccountInput!]
  AND: [FilterUpdateManyAccountInput!]
}

""""""
input FilterUpdateManyAccountPasswordPolicyInput {
  length: Float
  lowercase: Float
  uppercase: Float
  number: Float
  special: Float
  _id: MongoID
}

"""For performance reason this type contains only *indexed* fields."""
input FilterUpdateManyAccountOperatorsInput {
  name: FilterUpdateManyAccountNameOperatorsInput
  _id: FilterUpdateManyAccount_idOperatorsInput
}

input FilterUpdateManyAccountNameOperatorsInput {
  gt: String
  gte: String
  lt: String
  lte: String
  ne: String
  in: [String]
  nin: [String]
  regex: RegExpAsString
  exists: Boolean
}

input FilterUpdateManyAccount_idOperatorsInput {
  gt: MongoID
  gte: MongoID
  lt: MongoID
  lte: MongoID
  ne: MongoID
  in: [MongoID]
  nin: [MongoID]
  exists: Boolean
}

enum SortUpdateManyAccountInput {
  _ID_ASC
  _ID_DESC
  NAME_ASC
  NAME_DESC
}

type RemoveByIdAccountPayload {
  """Document ID"""
  recordId: MongoID

  """Removed document"""
  record: Account

  """
  Error that may occur during operation. If you request this field in GraphQL query, you will receive typed error in payload; otherwise error will be provided in root `errors` field of GraphQL response.
  """
  error: ErrorInterface
}

type RemoveOneAccountPayload {
  """Document ID"""
  recordId: MongoID

  """Removed document"""
  record: Account

  """
  Error that may occur during operation. If you request this field in GraphQL query, you will receive typed error in payload; otherwise error will be provided in root `errors` field of GraphQL response.
  """
  error: ErrorInterface
}

""""""
input FilterRemoveOneAccountInput {
  name: String
  environments: [String]
  passwordPolicy: FilterRemoveOneAccountPasswordPolicyInput
  auth: String
  _id: MongoID
  updatedAt: Date
  createdAt: Date

  """List of *indexed* fields that can be filtered via operators."""
  _operators: FilterRemoveOneAccountOperatorsInput
  OR: [FilterRemoveOneAccountInput!]
  AND: [FilterRemoveOneAccountInput!]
}

""""""
input FilterRemoveOneAccountPasswordPolicyInput {
  length: Float
  lowercase: Float
  uppercase: Float
  number: Float
  special: Float
  _id: MongoID
}

"""For performance reason this type contains only *indexed* fields."""
input FilterRemoveOneAccountOperatorsInput {
  name: FilterRemoveOneAccountNameOperatorsInput
  _id: FilterRemoveOneAccount_idOperatorsInput
}

input FilterRemoveOneAccountNameOperatorsInput {
  gt: String
  gte: String
  lt: String
  lte: String
  ne: String
  in: [String]
  nin: [String]
  regex: RegExpAsString
  exists: Boolean
}

input FilterRemoveOneAccount_idOperatorsInput {
  gt: MongoID
  gte: MongoID
  lt: MongoID
  lte: MongoID
  ne: MongoID
  in: [MongoID]
  nin: [MongoID]
  exists: Boolean
}

enum SortRemoveOneAccountInput {
  _ID_ASC
  _ID_DESC
  NAME_ASC
  NAME_DESC
}

type RemoveManyAccountPayload {
  """Affected documents number"""
  numAffected: Int

  """
  Error that may occur during operation. If you request this field in GraphQL query, you will receive typed error in payload; otherwise error will be provided in root `errors` field of GraphQL response.
  """
  error: ErrorInterface
}

""""""
input FilterRemoveManyAccountInput {
  name: String
  environments: [String]
  passwordPolicy: FilterRemoveManyAccountPasswordPolicyInput
  auth: String
  _id: MongoID
  updatedAt: Date
  createdAt: Date

  """List of *indexed* fields that can be filtered via operators."""
  _operators: FilterRemoveManyAccountOperatorsInput
  OR: [FilterRemoveManyAccountInput!]
  AND: [FilterRemoveManyAccountInput!]
}

""""""
input FilterRemoveManyAccountPasswordPolicyInput {
  length: Float
  lowercase: Float
  uppercase: Float
  number: Float
  special: Float
  _id: MongoID
}

"""For performance reason this type contains only *indexed* fields."""
input FilterRemoveManyAccountOperatorsInput {
  name: FilterRemoveManyAccountNameOperatorsInput
  _id: FilterRemoveManyAccount_idOperatorsInput
}

input FilterRemoveManyAccountNameOperatorsInput {
  gt: String
  gte: String
  lt: String
  lte: String
  ne: String
  in: [String]
  nin: [String]
  regex: RegExpAsString
  exists: Boolean
}

input FilterRemoveManyAccount_idOperatorsInput {
  gt: MongoID
  gte: MongoID
  lt: MongoID
  lte: MongoID
  ne: MongoID
  in: [MongoID]
  nin: [MongoID]
  exists: Boolean
}

type CreateOneUserPayload {
  """Document ID"""
  recordId: MongoID

  """Created document"""
  record: User

  """
  Error that may occur during operation. If you request this field in GraphQL query, you will receive typed error in payload; otherwise error will be provided in root `errors` field of GraphQL response.
  """
  error: ErrorInterface
}

""""""
input CreateOneUserInput {
  email: String!
  account: String!
  enabled: Boolean!
  firstName: String!
  lastName: String!
  salt: String
  hashedPassword: String
  passwordExpires: Date
  role: String!
  sso: String
  sso_sub: String
  locale: String!
  zoneInfo: String!
  avatar: String
  lastLoggedIn: Date!
  theme: String!
  updatedAt: Date
  createdAt: Date
}

type CreateManyUserPayload {
  """Documents IDs"""
  recordIds: [MongoID!]!

  """Created documents"""
  records: [User!]

  """Number of created documents"""
  createdCount: Int!

  """
  Error that may occur during operation. If you request this field in GraphQL query, you will receive typed error in payload; otherwise error will be provided in root `errors` field of GraphQL response.
  """
  error: ErrorInterface
}

""""""
input CreateManyUserInput {
  email: String!
  account: String!
  enabled: Boolean!
  firstName: String!
  lastName: String!
  salt: String
  hashedPassword: String
  passwordExpires: Date
  role: String!
  sso: String
  sso_sub: String
  locale: String!
  zoneInfo: String!
  avatar: String
  lastLoggedIn: Date!
  theme: String!
  updatedAt: Date
  createdAt: Date
}

type UpdateByIdUserPayload {
  """Document ID"""
  recordId: MongoID

  """Updated document"""
  record: User

  """
  Error that may occur during operation. If you request this field in GraphQL query, you will receive typed error in payload; otherwise error will be provided in root `errors` field of GraphQL response.
  """
  error: ErrorInterface
}

""""""
input UpdateByIdUserInput {
  email: String
  account: String
  enabled: Boolean
  firstName: String
  lastName: String
  salt: String
  hashedPassword: String
  passwordExpires: Date
  role: String
  sso: String
  sso_sub: String
  locale: String
  zoneInfo: String
  avatar: String
  lastLoggedIn: Date
  theme: String
  updatedAt: Date
  createdAt: Date
}

type UpdateOneUserPayload {
  """Document ID"""
  recordId: MongoID

  """Updated document"""
  record: User

  """
  Error that may occur during operation. If you request this field in GraphQL query, you will receive typed error in payload; otherwise error will be provided in root `errors` field of GraphQL response.
  """
  error: ErrorInterface
}

""""""
input UpdateOneUserInput {
  email: String
  account: String
  enabled: Boolean
  firstName: String
  lastName: String
  salt: String
  hashedPassword: String
  passwordExpires: Date
  role: String
  sso: String
  sso_sub: String
  locale: String
  zoneInfo: String
  avatar: String
  lastLoggedIn: Date
  theme: String
  updatedAt: Date
  createdAt: Date
}

""""""
input FilterUpdateOneUserInput {
  email: String
  account: String
  enabled: Boolean
  firstName: String
  lastName: String
  salt: String
  hashedPassword: String
  passwordExpires: Date
  role: String
  sso: String
  sso_sub: String
  locale: String
  zoneInfo: String
  avatar: String
  lastLoggedIn: Date
  theme: String
  _id: MongoID
  updatedAt: Date
  createdAt: Date

  """List of *indexed* fields that can be filtered via operators."""
  _operators: FilterUpdateOneUserOperatorsInput
  OR: [FilterUpdateOneUserInput!]
  AND: [FilterUpdateOneUserInput!]
}

"""For performance reason this type contains only *indexed* fields."""
input FilterUpdateOneUserOperatorsInput {
  email: FilterUpdateOneUserEmailOperatorsInput
  _id: FilterUpdateOneUser_idOperatorsInput
}

input FilterUpdateOneUserEmailOperatorsInput {
  gt: String
  gte: String
  lt: String
  lte: String
  ne: String
  in: [String]
  nin: [String]
  regex: RegExpAsString
  exists: Boolean
}

input FilterUpdateOneUser_idOperatorsInput {
  gt: MongoID
  gte: MongoID
  lt: MongoID
  lte: MongoID
  ne: MongoID
  in: [MongoID]
  nin: [MongoID]
  exists: Boolean
}

enum SortUpdateOneUserInput {
  _ID_ASC
  _ID_DESC
  EMAIL_ASC
  EMAIL_DESC
}

type UpdateManyUserPayload {
  """Affected documents number"""
  numAffected: Int

  """
  Error that may occur during operation. If you request this field in GraphQL query, you will receive typed error in payload; otherwise error will be provided in root `errors` field of GraphQL response.
  """
  error: ErrorInterface
}

""""""
input UpdateManyUserInput {
  email: String
  account: String
  enabled: Boolean
  firstName: String
  lastName: String
  salt: String
  hashedPassword: String
  passwordExpires: Date
  role: String
  sso: String
  sso_sub: String
  locale: String
  zoneInfo: String
  avatar: String
  lastLoggedIn: Date
  theme: String
  updatedAt: Date
  createdAt: Date
}

""""""
input FilterUpdateManyUserInput {
  email: String
  account: String
  enabled: Boolean
  firstName: String
  lastName: String
  salt: String
  hashedPassword: String
  passwordExpires: Date
  role: String
  sso: String
  sso_sub: String
  locale: String
  zoneInfo: String
  avatar: String
  lastLoggedIn: Date
  theme: String
  _id: MongoID
  updatedAt: Date
  createdAt: Date

  """List of *indexed* fields that can be filtered via operators."""
  _operators: FilterUpdateManyUserOperatorsInput
  OR: [FilterUpdateManyUserInput!]
  AND: [FilterUpdateManyUserInput!]
}

"""For performance reason this type contains only *indexed* fields."""
input FilterUpdateManyUserOperatorsInput {
  email: FilterUpdateManyUserEmailOperatorsInput
  _id: FilterUpdateManyUser_idOperatorsInput
}

input FilterUpdateManyUserEmailOperatorsInput {
  gt: String
  gte: String
  lt: String
  lte: String
  ne: String
  in: [String]
  nin: [String]
  regex: RegExpAsString
  exists: Boolean
}

input FilterUpdateManyUser_idOperatorsInput {
  gt: MongoID
  gte: MongoID
  lt: MongoID
  lte: MongoID
  ne: MongoID
  in: [MongoID]
  nin: [MongoID]
  exists: Boolean
}

enum SortUpdateManyUserInput {
  _ID_ASC
  _ID_DESC
  EMAIL_ASC
  EMAIL_DESC
}

type RemoveByIdUserPayload {
  """Document ID"""
  recordId: MongoID

  """Removed document"""
  record: User

  """
  Error that may occur during operation. If you request this field in GraphQL query, you will receive typed error in payload; otherwise error will be provided in root `errors` field of GraphQL response.
  """
  error: ErrorInterface
}

type RemoveOneUserPayload {
  """Document ID"""
  recordId: MongoID

  """Removed document"""
  record: User

  """
  Error that may occur during operation. If you request this field in GraphQL query, you will receive typed error in payload; otherwise error will be provided in root `errors` field of GraphQL response.
  """
  error: ErrorInterface
}

""""""
input FilterRemoveOneUserInput {
  email: String
  account: String
  enabled: Boolean
  firstName: String
  lastName: String
  salt: String
  hashedPassword: String
  passwordExpires: Date
  role: String
  sso: String
  sso_sub: String
  locale: String
  zoneInfo: String
  avatar: String
  lastLoggedIn: Date
  theme: String
  _id: MongoID
  updatedAt: Date
  createdAt: Date

  """List of *indexed* fields that can be filtered via operators."""
  _operators: FilterRemoveOneUserOperatorsInput
  OR: [FilterRemoveOneUserInput!]
  AND: [FilterRemoveOneUserInput!]
}

"""For performance reason this type contains only *indexed* fields."""
input FilterRemoveOneUserOperatorsInput {
  email: FilterRemoveOneUserEmailOperatorsInput
  _id: FilterRemoveOneUser_idOperatorsInput
}

input FilterRemoveOneUserEmailOperatorsInput {
  gt: String
  gte: String
  lt: String
  lte: String
  ne: String
  in: [String]
  nin: [String]
  regex: RegExpAsString
  exists: Boolean
}

input FilterRemoveOneUser_idOperatorsInput {
  gt: MongoID
  gte: MongoID
  lt: MongoID
  lte: MongoID
  ne: MongoID
  in: [MongoID]
  nin: [MongoID]
  exists: Boolean
}

enum SortRemoveOneUserInput {
  _ID_ASC
  _ID_DESC
  EMAIL_ASC
  EMAIL_DESC
}

type RemoveManyUserPayload {
  """Affected documents number"""
  numAffected: Int

  """
  Error that may occur during operation. If you request this field in GraphQL query, you will receive typed error in payload; otherwise error will be provided in root `errors` field of GraphQL response.
  """
  error: ErrorInterface
}

""""""
input FilterRemoveManyUserInput {
  email: String
  account: String
  enabled: Boolean
  firstName: String
  lastName: String
  salt: String
  hashedPassword: String
  passwordExpires: Date
  role: String
  sso: String
  sso_sub: String
  locale: String
  zoneInfo: String
  avatar: String
  lastLoggedIn: Date
  theme: String
  _id: MongoID
  updatedAt: Date
  createdAt: Date

  """List of *indexed* fields that can be filtered via operators."""
  _operators: FilterRemoveManyUserOperatorsInput
  OR: [FilterRemoveManyUserInput!]
  AND: [FilterRemoveManyUserInput!]
}

"""For performance reason this type contains only *indexed* fields."""
input FilterRemoveManyUserOperatorsInput {
  email: FilterRemoveManyUserEmailOperatorsInput
  _id: FilterRemoveManyUser_idOperatorsInput
}

input FilterRemoveManyUserEmailOperatorsInput {
  gt: String
  gte: String
  lt: String
  lte: String
  ne: String
  in: [String]
  nin: [String]
  regex: RegExpAsString
  exists: Boolean
}

input FilterRemoveManyUser_idOperatorsInput {
  gt: MongoID
  gte: MongoID
  lt: MongoID
  lte: MongoID
  ne: MongoID
  in: [MongoID]
  nin: [MongoID]
  exists: Boolean
}

type CreateOneTeamPayload {
  """Document ID"""
  recordId: MongoID

  """Created document"""
  record: Team

  """
  Error that may occur during operation. If you request this field in GraphQL query, you will receive typed error in payload; otherwise error will be provided in root `errors` field of GraphQL response.
  """
  error: ErrorInterface
}

""""""
input CreateOneTeamInput {
  name: String!
  description: String
  account: String!
  members: [String]
  tags: [String]
  updatedAt: Date
  createdAt: Date
}

type CreateManyTeamPayload {
  """Documents IDs"""
  recordIds: [MongoID!]!

  """Created documents"""
  records: [Team!]

  """Number of created documents"""
  createdCount: Int!

  """
  Error that may occur during operation. If you request this field in GraphQL query, you will receive typed error in payload; otherwise error will be provided in root `errors` field of GraphQL response.
  """
  error: ErrorInterface
}

""""""
input CreateManyTeamInput {
  name: String!
  description: String
  account: String!
  members: [String]
  tags: [String]
  updatedAt: Date
  createdAt: Date
}

type UpdateByIdTeamPayload {
  """Document ID"""
  recordId: MongoID

  """Updated document"""
  record: Team

  """
  Error that may occur during operation. If you request this field in GraphQL query, you will receive typed error in payload; otherwise error will be provided in root `errors` field of GraphQL response.
  """
  error: ErrorInterface
}

""""""
input UpdateByIdTeamInput {
  name: String
  description: String
  account: String
  members: [String]
  tags: [String]
  updatedAt: Date
  createdAt: Date
}

type UpdateOneTeamPayload {
  """Document ID"""
  recordId: MongoID

  """Updated document"""
  record: Team

  """
  Error that may occur during operation. If you request this field in GraphQL query, you will receive typed error in payload; otherwise error will be provided in root `errors` field of GraphQL response.
  """
  error: ErrorInterface
}

""""""
input UpdateOneTeamInput {
  name: String
  description: String
  account: String
  members: [String]
  tags: [String]
  updatedAt: Date
  createdAt: Date
}

""""""
input FilterUpdateOneTeamInput {
  name: String
  description: String
  account: String
  members: [String]
  tags: [String]
  _id: MongoID
  updatedAt: Date
  createdAt: Date

  """List of *indexed* fields that can be filtered via operators."""
  _operators: FilterUpdateOneTeamOperatorsInput
  OR: [FilterUpdateOneTeamInput!]
  AND: [FilterUpdateOneTeamInput!]
}

"""For performance reason this type contains only *indexed* fields."""
input FilterUpdateOneTeamOperatorsInput {
  _id: FilterUpdateOneTeam_idOperatorsInput
}

input FilterUpdateOneTeam_idOperatorsInput {
  gt: MongoID
  gte: MongoID
  lt: MongoID
  lte: MongoID
  ne: MongoID
  in: [MongoID]
  nin: [MongoID]
  exists: Boolean
}

enum SortUpdateOneTeamInput {
  _ID_ASC
  _ID_DESC
}

type UpdateManyTeamPayload {
  """Affected documents number"""
  numAffected: Int

  """
  Error that may occur during operation. If you request this field in GraphQL query, you will receive typed error in payload; otherwise error will be provided in root `errors` field of GraphQL response.
  """
  error: ErrorInterface
}

""""""
input UpdateManyTeamInput {
  name: String
  description: String
  account: String
  members: [String]
  tags: [String]
  updatedAt: Date
  createdAt: Date
}

""""""
input FilterUpdateManyTeamInput {
  name: String
  description: String
  account: String
  members: [String]
  tags: [String]
  _id: MongoID
  updatedAt: Date
  createdAt: Date

  """List of *indexed* fields that can be filtered via operators."""
  _operators: FilterUpdateManyTeamOperatorsInput
  OR: [FilterUpdateManyTeamInput!]
  AND: [FilterUpdateManyTeamInput!]
}

"""For performance reason this type contains only *indexed* fields."""
input FilterUpdateManyTeamOperatorsInput {
  _id: FilterUpdateManyTeam_idOperatorsInput
}

input FilterUpdateManyTeam_idOperatorsInput {
  gt: MongoID
  gte: MongoID
  lt: MongoID
  lte: MongoID
  ne: MongoID
  in: [MongoID]
  nin: [MongoID]
  exists: Boolean
}

enum SortUpdateManyTeamInput {
  _ID_ASC
  _ID_DESC
}

type RemoveByIdTeamPayload {
  """Document ID"""
  recordId: MongoID

  """Removed document"""
  record: Team

  """
  Error that may occur during operation. If you request this field in GraphQL query, you will receive typed error in payload; otherwise error will be provided in root `errors` field of GraphQL response.
  """
  error: ErrorInterface
}

type RemoveOneTeamPayload {
  """Document ID"""
  recordId: MongoID

  """Removed document"""
  record: Team

  """
  Error that may occur during operation. If you request this field in GraphQL query, you will receive typed error in payload; otherwise error will be provided in root `errors` field of GraphQL response.
  """
  error: ErrorInterface
}

""""""
input FilterRemoveOneTeamInput {
  name: String
  description: String
  account: String
  members: [String]
  tags: [String]
  _id: MongoID
  updatedAt: Date
  createdAt: Date

  """List of *indexed* fields that can be filtered via operators."""
  _operators: FilterRemoveOneTeamOperatorsInput
  OR: [FilterRemoveOneTeamInput!]
  AND: [FilterRemoveOneTeamInput!]
}

"""For performance reason this type contains only *indexed* fields."""
input FilterRemoveOneTeamOperatorsInput {
  _id: FilterRemoveOneTeam_idOperatorsInput
}

input FilterRemoveOneTeam_idOperatorsInput {
  gt: MongoID
  gte: MongoID
  lt: MongoID
  lte: MongoID
  ne: MongoID
  in: [MongoID]
  nin: [MongoID]
  exists: Boolean
}

enum SortRemoveOneTeamInput {
  _ID_ASC
  _ID_DESC
}

type RemoveManyTeamPayload {
  """Affected documents number"""
  numAffected: Int

  """
  Error that may occur during operation. If you request this field in GraphQL query, you will receive typed error in payload; otherwise error will be provided in root `errors` field of GraphQL response.
  """
  error: ErrorInterface
}

""""""
input FilterRemoveManyTeamInput {
  name: String
  description: String
  account: String
  members: [String]
  tags: [String]
  _id: MongoID
  updatedAt: Date
  createdAt: Date

  """List of *indexed* fields that can be filtered via operators."""
  _operators: FilterRemoveManyTeamOperatorsInput
  OR: [FilterRemoveManyTeamInput!]
  AND: [FilterRemoveManyTeamInput!]
}

"""For performance reason this type contains only *indexed* fields."""
input FilterRemoveManyTeamOperatorsInput {
  _id: FilterRemoveManyTeam_idOperatorsInput
}

input FilterRemoveManyTeam_idOperatorsInput {
  gt: MongoID
  gte: MongoID
  lt: MongoID
  lte: MongoID
  ne: MongoID
  in: [MongoID]
  nin: [MongoID]
  exists: Boolean
}

type CreateOneApiKeyPayload {
  """Document ID"""
  recordId: MongoID

  """Created document"""
  record: ApiKey

  """
  Error that may occur during operation. If you request this field in GraphQL query, you will receive typed error in payload; otherwise error will be provided in root `errors` field of GraphQL response.
  """
  error: ErrorInterface
}

""""""
input CreateOneApiKeyInput {
  account: String!
  key: String!
  name: String!
  role: String!
  enabled: Boolean!
  createdBy: String!
  modifiedBy: String!
  lastUsed: String
  lastUsedBy: String
  updatedAt: Date
  createdAt: Date
}

type CreateManyApiKeyPayload {
  """Documents IDs"""
  recordIds: [MongoID!]!

  """Created documents"""
  records: [ApiKey!]

  """Number of created documents"""
  createdCount: Int!

  """
  Error that may occur during operation. If you request this field in GraphQL query, you will receive typed error in payload; otherwise error will be provided in root `errors` field of GraphQL response.
  """
  error: ErrorInterface
}

""""""
input CreateManyApiKeyInput {
  account: String!
  key: String!
  name: String!
  role: String!
  enabled: Boolean!
  createdBy: String!
  modifiedBy: String!
  lastUsed: String
  lastUsedBy: String
  updatedAt: Date
  createdAt: Date
}

type UpdateByIdApiKeyPayload {
  """Document ID"""
  recordId: MongoID

  """Updated document"""
  record: ApiKey

  """
  Error that may occur during operation. If you request this field in GraphQL query, you will receive typed error in payload; otherwise error will be provided in root `errors` field of GraphQL response.
  """
  error: ErrorInterface
}

""""""
input UpdateByIdApiKeyInput {
  account: String
  key: String
  name: String
  role: String
  enabled: Boolean
  createdBy: String
  modifiedBy: String
  lastUsed: String
  lastUsedBy: String
  updatedAt: Date
  createdAt: Date
}

type UpdateOneApiKeyPayload {
  """Document ID"""
  recordId: MongoID

  """Updated document"""
  record: ApiKey

  """
  Error that may occur during operation. If you request this field in GraphQL query, you will receive typed error in payload; otherwise error will be provided in root `errors` field of GraphQL response.
  """
  error: ErrorInterface
}

""""""
input UpdateOneApiKeyInput {
  account: String
  key: String
  name: String
  role: String
  enabled: Boolean
  createdBy: String
  modifiedBy: String
  lastUsed: String
  lastUsedBy: String
  updatedAt: Date
  createdAt: Date
}

""""""
input FilterUpdateOneApiKeyInput {
  account: String
  key: String
  name: String
  role: String
  enabled: Boolean
  createdBy: String
  modifiedBy: String
  lastUsed: String
  lastUsedBy: String
  _id: MongoID
  updatedAt: Date
  createdAt: Date

  """List of *indexed* fields that can be filtered via operators."""
  _operators: FilterUpdateOneApiKeyOperatorsInput
  OR: [FilterUpdateOneApiKeyInput!]
  AND: [FilterUpdateOneApiKeyInput!]
}

"""For performance reason this type contains only *indexed* fields."""
input FilterUpdateOneApiKeyOperatorsInput {
  _id: FilterUpdateOneApiKey_idOperatorsInput
}

input FilterUpdateOneApiKey_idOperatorsInput {
  gt: MongoID
  gte: MongoID
  lt: MongoID
  lte: MongoID
  ne: MongoID
  in: [MongoID]
  nin: [MongoID]
  exists: Boolean
}

enum SortUpdateOneApiKeyInput {
  _ID_ASC
  _ID_DESC
}

type UpdateManyApiKeyPayload {
  """Affected documents number"""
  numAffected: Int

  """
  Error that may occur during operation. If you request this field in GraphQL query, you will receive typed error in payload; otherwise error will be provided in root `errors` field of GraphQL response.
  """
  error: ErrorInterface
}

""""""
input UpdateManyApiKeyInput {
  account: String
  key: String
  name: String
  role: String
  enabled: Boolean
  createdBy: String
  modifiedBy: String
  lastUsed: String
  lastUsedBy: String
  updatedAt: Date
  createdAt: Date
}

""""""
input FilterUpdateManyApiKeyInput {
  account: String
  key: String
  name: String
  role: String
  enabled: Boolean
  createdBy: String
  modifiedBy: String
  lastUsed: String
  lastUsedBy: String
  _id: MongoID
  updatedAt: Date
  createdAt: Date

  """List of *indexed* fields that can be filtered via operators."""
  _operators: FilterUpdateManyApiKeyOperatorsInput
  OR: [FilterUpdateManyApiKeyInput!]
  AND: [FilterUpdateManyApiKeyInput!]
}

"""For performance reason this type contains only *indexed* fields."""
input FilterUpdateManyApiKeyOperatorsInput {
  _id: FilterUpdateManyApiKey_idOperatorsInput
}

input FilterUpdateManyApiKey_idOperatorsInput {
  gt: MongoID
  gte: MongoID
  lt: MongoID
  lte: MongoID
  ne: MongoID
  in: [MongoID]
  nin: [MongoID]
  exists: Boolean
}

enum SortUpdateManyApiKeyInput {
  _ID_ASC
  _ID_DESC
}

type RemoveByIdApiKeyPayload {
  """Document ID"""
  recordId: MongoID

  """Removed document"""
  record: ApiKey

  """
  Error that may occur during operation. If you request this field in GraphQL query, you will receive typed error in payload; otherwise error will be provided in root `errors` field of GraphQL response.
  """
  error: ErrorInterface
}

type RemoveOneApiKeyPayload {
  """Document ID"""
  recordId: MongoID

  """Removed document"""
  record: ApiKey

  """
  Error that may occur during operation. If you request this field in GraphQL query, you will receive typed error in payload; otherwise error will be provided in root `errors` field of GraphQL response.
  """
  error: ErrorInterface
}

""""""
input FilterRemoveOneApiKeyInput {
  account: String
  key: String
  name: String
  role: String
  enabled: Boolean
  createdBy: String
  modifiedBy: String
  lastUsed: String
  lastUsedBy: String
  _id: MongoID
  updatedAt: Date
  createdAt: Date

  """List of *indexed* fields that can be filtered via operators."""
  _operators: FilterRemoveOneApiKeyOperatorsInput
  OR: [FilterRemoveOneApiKeyInput!]
  AND: [FilterRemoveOneApiKeyInput!]
}

"""For performance reason this type contains only *indexed* fields."""
input FilterRemoveOneApiKeyOperatorsInput {
  _id: FilterRemoveOneApiKey_idOperatorsInput
}

input FilterRemoveOneApiKey_idOperatorsInput {
  gt: MongoID
  gte: MongoID
  lt: MongoID
  lte: MongoID
  ne: MongoID
  in: [MongoID]
  nin: [MongoID]
  exists: Boolean
}

enum SortRemoveOneApiKeyInput {
  _ID_ASC
  _ID_DESC
}

type RemoveManyApiKeyPayload {
  """Affected documents number"""
  numAffected: Int

  """
  Error that may occur during operation. If you request this field in GraphQL query, you will receive typed error in payload; otherwise error will be provided in root `errors` field of GraphQL response.
  """
  error: ErrorInterface
}

""""""
input FilterRemoveManyApiKeyInput {
  account: String
  key: String
  name: String
  role: String
  enabled: Boolean
  createdBy: String
  modifiedBy: String
  lastUsed: String
  lastUsedBy: String
  _id: MongoID
  updatedAt: Date
  createdAt: Date

  """List of *indexed* fields that can be filtered via operators."""
  _operators: FilterRemoveManyApiKeyOperatorsInput
  OR: [FilterRemoveManyApiKeyInput!]
  AND: [FilterRemoveManyApiKeyInput!]
}

"""For performance reason this type contains only *indexed* fields."""
input FilterRemoveManyApiKeyOperatorsInput {
  _id: FilterRemoveManyApiKey_idOperatorsInput
}

input FilterRemoveManyApiKey_idOperatorsInput {
  gt: MongoID
  gte: MongoID
  lt: MongoID
  lte: MongoID
  ne: MongoID
  in: [MongoID]
  nin: [MongoID]
  exists: Boolean
}